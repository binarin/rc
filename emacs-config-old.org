#+TITLE: binarin's emacs configuration
#+OPTIONS: toc:4 h:4
* File header
  :PROPERTIES:
  :ID:       872629ce-4d48-47d4-b276-f7935cd31243
  :END:
** Enable lexical bindings
  #+begin_src emacs-lisp
    ;; -*- lexical-binding: t -*-
  #+end_src

** Load helper modules
  #+begin_src emacs-lisp
    (package-initialize)

    (require 'cl-lib)
    (require 'f)
    (require 's)
    (require 'dash)
    (require 'anaphora)
    (require 'general)

    ;; general-setq will also call triggers on customizable setttings,
    ;; allowing them to be properly changed even after corresponding
    ;; package was loaded
    (fset 'gsetq 'general-setq)
  #+end_src

** Use separate lisp file for customizations made through UI
   Load it early, so any lisp customizations can override customized values.
  #+begin_src emacs-lisp
    (setf custom-file (concat (file-name-directory binarin/primary-emacs-config) "custom.el"))
    (load-file custom-file)
  #+end_src

* Startup stages
* Personal information
  :PROPERTIES:
  :ID:       04b545bf-52b7-412d-9ce5-80ee4bbe10cf
  :END:
  #+begin_src emacs-lisp
    (setf user-full-name "Alexey Lebedeff"
          user-mail-address "binarin@binarin.ru")
    (setf password-cache-expiry nil)
    (setf password-cache t)
  #+end_src
* Appearance
** Performance tuning

   Greatly improves performance for buffers with very long lines.
   #+BEGIN_SRC emacs-lisp
     (setq-default bidi-display-reordering nil)
   #+END_SRC

** Buffer names
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     (setq uniquify-separator "/")
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")
   #+end_src

** Highlight parentheses
   :PROPERTIES:
   :ID:       239f7033-5510-42f0-aef9-98d6b35b7647
   :END:
   #+begin_src emacs-lisp
     (require 'highlight-parentheses)
     (defun turn-on-highlight-parentheses-mode ()
       (highlight-parentheses-mode t))
     (define-global-minor-mode global-highlight-parentheses-mode
       highlight-parentheses-mode
       turn-on-highlight-parentheses-mode)
     (global-highlight-parentheses-mode t)
   #+end_src
* Behaviour
** Frame handling
   #+BEGIN_SRC emacs-lisp
     (defun clone-indirect-buffer-other-frame (newname display-flag)
       "Like `clone-indirect-buffer-other-window' but display in another frame."
       (interactive
        (progn
          (if (get major-mode 'no-clone-indirect)
              (error "Cannot indirectly clone a buffer in %s mode" mode-name))
          (list (if current-prefix-arg
                    (read-buffer "Name of indirect buffer: " (current-buffer))) t)))
       (save-window-excursion
         (let ((newbuf (clone-indirect-buffer newname display-flag)))
           (switch-to-buffer-other-frame newbuf))))

     (global-set-key (kbd "C-x 5 c") #'clone-indirect-buffer-other-frame)
   #+END_SRC
** Narrowing
   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC
** Tramp
   #+BEGIN_SRC emacs-lisp
     (defun binarin/shell-command-to-string-remote-advice (orig-fun &rest args)
       (let ((shell-file-name (if (tramp-tramp-file-p default-directory)
                                  "/bin/sh"
                                shell-file-name)))
         (apply orig-fun args)))

     (advice-add 'shell-command-to-string :around #'binarin/shell-command-to-string-remote-advice)

     (setq vc-ignore-dir-regexp
           (format "\\(%s\\)\\|\\(%s\\)"
                   vc-ignore-dir-regexp
                   tramp-file-name-regexp))

   #+END_SRC
** Eshell
   :PROPERTIES:
   :ID:       712d9d5a-4541-43ba-b73a-963b86cd511c
   :END:
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "tramp"
       (lambda ()
         (add-hook 'eshell-mode-hook
                   'tramp-eshell-directory-change)))

     (eval-after-load "esh-module"
       (lambda ()
         (add-to-list 'eshell-modules-list 'eshell-tramp)))
   #+END_SRC
** Dired
** Finding configuration pieces from optional directories
   #+begin_src emacs-lisp
     (defvar binarin/optional-config-repos-dir (expand-file-name "~/.rc.d/"))
     (defvar binarin/optional-config-repos (-map #'file-name-as-directory (directory-files binarin/optional-config-repos-dir t "^[0-9a-zA-Z]")))

     (defun binarin/optional-repo-files (filename)
       (loop for dir in binarin/optional-config-repos
             for fullname = (concat dir filename)
             when (file-exists-p fullname)
             collect fullname))
   #+end_src

** Search for authinfo files
   #+begin_src emacs-lisp
     (setf auth-sources (cons
                         "~/.authinfo"
                         (binarin/optional-repo-files ".authinfo.gpg")))
   #+end_src
** Killing buffers and exiting emacs
   :PROPERTIES:
   :ID:       4c9e3061-cfc7-420d-b82c-b8956b8fe95a
   :END:

   Don't kill scratch buffers
   #+BEGIN_SRC emacs-lisp
     (defun binarin/dont-kill-scratch-buffer ()
       (or (not (string= (buffer-name) "*scratch*"))
           (ignore (bury-buffer))))
     (add-hook 'kill-buffer-query-functions #'binarin/dont-kill-scratch-buffer)
   #+END_SRC

** Scrolling
   :PROPERTIES:
   :ID:       6ea7fb69-4f49-4fc6-b8cf-38fe4926b19e
   :END:

   Don't recenter point on redisplay, scroll just enough text to bring
   point into view, even if you move far away.

   #+begin_src emacs-lisp
   (setq scroll-conservatively 101)
   #+end_src

** Yasnippet
   :PROPERTIES:
   :ID:       8db682fa-6f3f-4726-bb46-7b577e9919e4
   :END:
   #+begin_src emacs-lisp
     (require 'yasnippet)
     (setf yas-snippet-dirs '("~/.rc/snippets" yas-installed-snippets-dir))
     (yas-global-mode 1)
   #+end_src

** Eshell in projectile root
   #+begin_src emacs-lisp
     (defun binarin/projectile-eshell  ()
       (interactive)
       (let* ((height (/ (window-total-height) 3))
              (default-directory (projectile-project-root))
              (eshell-buffer-name (concat "*eshell: " (abbreviate-file-name default-directory) "*")))
         (split-window-vertically (- height))
         (other-window 1)
         (eshell)))

     (defun eshell/n ()
       (if (window-parent)
           (delete-window)
         (switch-to-buffer (other-buffer))))

     (global-set-key (kbd "C-!") #'binarin/projectile-eshell)
   #+end_src

** Viewing PDF inside emacs
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'pdf-tools-install)
   #+END_SRC
** Other window scrolling
   Scroll PDF by page in other window.

   #+BEGIN_SRC emacs-lisp
     (defun binarin/scroll-other-window (&optional arg)
       (interactive "P")
       (awhen (ignore-errors (other-window-for-scrolling))
         (let* ((buffer (window-buffer it))
                (mode (with-current-buffer buffer major-mode)))
           (cond
            ((eq mode 'pdf-view-mode)
             (save-selected-window
               (select-window it)
               (with-current-buffer buffer
                 (pdf-view-next-page (cond ((eq arg '-) -1)
                                           ((numberp arg) arg)
                                           (t 1))))))
            (t (scroll-other-window arg))))))

     (global-set-key (kbd "C-M-v") #'binarin/scroll-other-window)
   #+END_SRC

** Using settings from .editorconfig
   #+BEGIN_SRC emacs-lisp
     (require 'editorconfig)
     (add-hook 'prog-mode-hook #'(lambda () (editorconfig-mode 1)))
     (add-hook 'text-mode-hook #'(lambda () (editorconfig-mode 1)))
   #+END_SRC
** Completion
   #+BEGIN_SRC emacs-lisp
     ;; (global-company-mode t)
     (eval-after-load "company"
       (lambda ()
         (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
         (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)))
   #+END_SRC

** Spell-checking
   #+BEGIN_SRC emacs-lisp
     (setf ispell-dictionary "en")
     (add-hook 'org-mode-hook 'flyspell-mode)
   #+END_SRC
* Org (to clean up)
** Hacks
   #+BEGIN_SRC emacs-lisp
     (defun binarin/org-reveal-tags ()
       (outline-flag-region (point) (line-end-position) nil))

     (add-hook 'org-after-tags-change-hook #'binarin/org-reveal-tags)
   #+END_SRC

** Blogging
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'ox
       (require 'ox-hugo))

     (setf org-hugo-default-section-directory "post")
   #+END_SRC
** Custom sorting

#+begin_src emacs-lisp
  (defvar binarin/priority-todos-for-sorting '("STARTED" "WAITING"))
  (defun binarin/todo-to-started-first-int ()
    "Default todo order is modified by giving more priority to
  todo's from binarin/priority-todos-for-sorting and entries
  without any todo keywords at all."
    (let* ((props (org-entry-properties))
           (item-todo (cdr (assoc "TODO" props)))
           (item-prio (- (aif (cdr (assoc "PRIORITY" props))
                             (aref it 0)
                           org-default-priority)
                         org-highest-priority))
           (item-tags (cdr (assoc "TAGS" props)))
           (tag-next-prio (if (and item-tags
                                   (string-match ":NEXT:" item-tags))
                              -10
                            0))
           (modified-todo-order
            (append binarin/priority-todos-for-sorting
                    (-remove #'(lambda (todo) (member todo binarin/priority-todos-for-sorting)) org-todo-keywords-1)))
           (todo-idx (if item-todo (1+ (-elem-index item-todo modified-todo-order)) 0))
           (prio-range (1+ (- org-default-priority org-highest-priority))))
      (+ (* prio-range todo-idx) item-prio tag-next-prio)))

  (defun binarin/compare-on-next-status-and-tag-priority (a b)
    (let ((ta (get-text-property 1 'tags a))
          (tb (get-text-property 1 'tags b))
          (next-a (member "next" (get-text-property 1 'tags a)))
          (next-b (member "next" (get-text-property 1 'tags b)))
          (prio-a (member (get-text-property 1 'todo-state a) binarin/priority-todos-for-sorting))
          (prio-b (member (get-text-property 1 'todo-state b) binarin/priority-todos-for-sorting)))
      (cond
       ((and next-a next-b)
        (cond
         ((and prio-a prio-b) nil)
         ((not prio-a) -1)
         (t +1)))
       (next-a 1)
       (next-b -1)
       ((and prio-a prio-b) nil)
       (prio-a 1)
       (prio-b -1))))

  (defun binarin/org-sort-entries ()
    (interactive)
    (org-sort-entries nil ?f #'binarin/todo-to-started-first-int)
    (org-cycle)
    (org-cycle))
#+end_src

** Agendas
** Projects
   #+begin_src emacs-lisp
     (setf org-stuck-projects
           `(,binarin/project-matcher ("WAITING") ("NEXT") ""))
     (setq org-tags-exclude-from-inheritance '("PROJ"))
   #+end_src
** Drawers
   #+BEGIN_SRC emacs-lisp
     (setq org-drawers '("PROPERTIES" "LOGBOOK" "CLOCK" "FILES"))
     (setq org-clock-into-drawer "CLOCK")
     (setq org-export-with-drawers t)
   #+END_SRC
** Clocking
   :PROPERTIES:
   :ID:       677d1432-15de-42c8-8a43-f39549acde65
   :END:
   #+begin_src emacs-lisp
     ;; Yes it's long... but more is better ;)
     (setf org-clock-history-length 35)

     ;; Resume clocking task on clock-in if the clock is open
     (setf org-clock-in-resume t)

     ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
     (setf org-clock-out-remove-zero-time-clocks t)

     ;; Don't clock out when moving task to a done state
     (setf org-clock-out-when-done nil)

     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setf org-clock-persist t)

     ;; Keep clocks running
     (setf org-remember-clock-out-on-exit nil)

     (setq org-log-into-drawer t)

     (org-clock-persistence-insinuate)

     (setq org-time-stamp-rounding-minutes (quote (1 15)))

     (setq org-columns-default-format "%85ITEM(Task) %8Effort(Effort){:} %8CLOCKSUM")
     (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))


     (require 'org-clock)
     (add-hook 'emacs-startup-hook #'org-clock-load)

     (defun binarin/clockout-nagger ()
       (call-process "desktop-nagger" nil nil nil))

     (defun binarin/clockout-remove-nagger ()
       (call-process "pkill" nil nil nil "-f" "desktop-nagger"))

     (add-hook 'org-clock-out-hook #'binarin/clockout-nagger)
     (add-hook 'org-clock-in-hook #'binarin/clockout-remove-nagger)
   #+end_src

   I want to automatically clock-out from a current task if a computer
   was inactive for some time. Builtin org-mode supports asking what I
   want to do with such task, but I want to just clock-out
   unconditionally - it makes moving between computers
   easier.

   #+begin_src emacs-lisp
     (setf org-clock-x11idle-program-name "xprintidle-ng")
     (setf org-x11idle-exists-p t)

     ;; (SEC-HIGH SEC-LOW MICROSEC PICOSEC) current-idle-time
     (defvar binarin/idle-clockout-timeout 1800
       "Perform first attempt to clock-out after this period of emacs
       inactivity. It can decide to postpone the clocking-out if it's
       only emacs that is idle, but not the computer itself.")

     (defvar binarin/idle-clockout-recheck-interval 300
       "After a sufficient idle time was achieved by emacs, we'll
       periodically check current idle time of the whole OS to decide
       whether we need to clock out")

     (defvar binarin/idle-clockout-repeat-timer nil
       "Timer for repeatedly (during a single idle interval) checking
       whether we need to clock-out")

     (defun binarin/clockout-when-idle ()
       (awhen binarin/idle-clockout-repeat-timer
         (cancel-timer it))
       (when (org-clocking-p)
         (if (> (org-user-idle-seconds)
                binarin/idle-clockout-timeout)
             (org-clock-out nil t)
           (setf binarin/idle-clockout-repeat-timer
                 (run-with-idle-timer
                  (time-add (current-idle-time) binarin/idle-clockout-recheck-interval)
                  nil
                  'binarin/clockout-when-idle)))))

     (run-with-idle-timer binarin/idle-clockout-timeout t 'binarin/clockout-when-idle)

   #+end_src
** Templates
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist '("l"  "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC" "<src lang=\"emacs-lisp\">\n\n</src>"))
   #+END_SRC
** Export
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "ox" (lambda () (require 'htmlize)))
   #+END_SRC
** Mobile sync
    Don't sync with mobile calendars that were downloaded from Google.

    #+begin_src emacs-lisp
      (setf org-mobile-files (-filter #'(lambda (file) (not (s-suffix? "-cal.org" file))) org-agenda-files))
    #+end_src

    #+begin_src emacs-lisp
      (setf org-mobile-inbox-for-pull "~/org/refile.org")
      (setq org-mobile-directory (expand-file-name "~/Dropbox/org/"))
    #+end_src

** Priorities
   #+BEGIN_SRC emacs-lisp
     (setq org-default-priority 68)
   #+END_SRC
** Notifications
   #+BEGIN_SRC emacs-lisp

     (require 'appt)

     (defun binarin/refresh-appts ()
       (org-agenda-to-appt t))

     ;; Run once, activate and schedule refresh
     (binarin/refresh-appts)
     (appt-activate t)
     (run-at-time "24:01" nil #'binarin/refresh-appts)

     ; Update appt each time agenda opened.
     (add-hook 'org-finalize-agenda-hook #'binarin/refresh-appts)

     (defvar binarin/last-appt-notify-id nil)

     (defun binarin/appt-notify (min-to-app new-time msg)
       (setf binarin/last-appt-notify-id
             (notifications-notify
              :title "Appointment"
              :body (if (listp msg) (string-join msg "\\n") msg)
              :timeout 5000
              :urgency 'normal)))


     ; Setup zenify, we tell appt to use window, and replace default function
     (setf appt-display-format 'window)
     (setf appt-disp-window-function #'binarin/appt-notify)
     (setf appt-message-warning-time 10)


   #+END_SRC

** Calendar Sync
   #+BEGIN_SRC emacs-lisp
     (require 'org-gcal)
     (setq org-gcal-client-id (awhen (auth-source-search :host "booking-gcal" :max 1)
                                (plist-get (car it) :user))
           org-gcal-client-secret (awhen (auth-source-search :host "booking-gcal" :max 1)
                                    (funcall (plist-get (car it) :secret)))
           org-gcal-file-alist '(("alexey.lebedeff@booking.com" .  "~/org/bcal.org")
                                 ("booking.com_m7nonokhet6ua0s6iflvat1g1o@group.calendar.google.com" .  "~/org/bcal-spd.org")
                                 ("7pgunlpa0t36dtkhpcuhhhmddcnt9b8d@import.calendar.google.com" . "~/org/bcal-evts.org")))
   #+END_SRC
* Communication
** Email
*** Load custom-built mu4e
    #+begin_src emacs-lisp
      (add-to-list 'load-path "/run/current-system/sw/share/emacs/site-lisp/mu4e")
      (add-to-list 'load-path "~/apps/mu/share/emacs/site-lisp/mu4e")
      (autoload 'mu4e "mu4e" nil t)

      (setf mu4e-mu-binary "/run/current-system/sw/bin/mu")
    #+end_src

*** Unread count extension

    #+begin_src emacs-lisp
      (eval-after-load "mu4e"
        #'(lambda ()
            (require 'mu4e-maildirs-extension)
            (mu4e-maildirs-extension)
            (define-key mu4e-main-mode-map "n" #'next-line)
            (define-key mu4e-main-mode-map "p" #'previous-line)
            (setf mu4e-maildirs-extension-count-command-format
                  (replace-regexp-in-string "^mu" mu4e-mu-binary mu4e-maildirs-extension-count-command-format))

            (setf mu4e-maildirs-extension-custom-list (-remove #'(lambda (x) (or (s-contains? "[Gmail]" x)
                                                                                 (s-contains? "archive-" x)
                                                                                 (s-contains? "Trash" x))) (mu4e-get-maildirs)))
            (setf mu4e-maildirs-extension-insert-before-str "\n  Basics")))


    #+end_src

*** Multiple mail accounts
    #+begin_src emacs-lisp
      (defvar binarin/gmail-accounts '("binarin@gmail.com" "binarin@binarin.ru" "alexey.lebedeff@booking.com"))

      (setf mu4e-user-mail-address-list binarin/gmail-accounts
            mu4e-context-policy 'pick-first)

      (defun binarin/gmail-maildir (email dir)
        (concat "/" email "/" dir))

      (defun binarin/gmail-archive-dir (email folder)
        "\"archive-\" is prefix because of way mu handles wildcards
        like \"/dir/\*\", which is actually interpreted as \"/dir*\""
        (concat "/archive-" email "/" folder))

      (setf message-send-mail-function 'smtpmail-send-it
            smtpmail-default-smtp-server "smtp.gmail.com"
            smtpmail-smtp-server "smtp.gmail.com"
            smtpmail-smtp-service 465
            smtpmail-stream-type 'ssl)

      (defun binarin/make-maildir-mu4e-context (account)
        (make-mu4e-context
         :name account
         :match-func #'(lambda (msg)
                         (when msg
                           (s-equals? account (binarin/mu4e-maildir-to-account
                                               (mu4e-message-field msg :maildir)))))
         :vars `((mail-reply-to . ,account)
                 (user-mail-address . ,account)
                 (smtpmail-smtp-user . ,account))))

      (defun binarin/make-mu4e-contexts ()
        (-map 'binarin/make-maildir-mu4e-context binarin/gmail-accounts))

      (eval-after-load "mu4e" '(setf mu4e-contexts (binarin/make-mu4e-contexts)))

      (defun binarin/mu4e-maildir-to-account (maildir)
        (caddr (s-match "^/\\(archive-\\)?\\([^/]+?\\)/" maildir)))

      (defun binarin/mu4e-sibling-folder (maybe-maildir folder)
        (let ((account (if maybe-maildir
                           (binarin/mu4e-maildir-to-account maybe-maildir)
                         (mu4e-context-name mu4e~context-current))))
          (binarin/gmail-maildir account folder)))

      (defun binarin/mu4e-drafts-folder (maybe-maildir)
        )

      (defun binarin/mu4e-sibling-archive-folder (maildir folder)
        (binarin/gmail-archive-dir (binarin/mu4e-maildir-to-account maildir) folder))



      (setf mu4e-maildir       "~/.mail/"
            mu4e-refile-folder #'(lambda (msg) (binarin/mu4e-sibling-archive-folder (mu4e-message-field msg :maildir) "Archive"))
            mu4e-sent-folder   #'(lambda (msg) (binarin/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Sent"))
            mu4e-drafts-folder #'(lambda (msg) (binarin/mu4e-sibling-folder (and msg (mu4e-message-field msg :maildir)) "Drafts"))
            mu4e-trash-folder  #'(lambda (msg) (binarin/mu4e-sibling-archive-folder (mu4e-message-field msg :maildir) "Trash")))

    #+end_src

*** Appearance
    :PROPERTIES:
    :ID:       b6fdc1ae-0a67-4812-9de0-d36cf22f45fe
    :END:

#+begin_src emacs-lisp
  (autoload 'mu4e-shr2text "mu4e-contrib")
  (setq mu4e-html2text-command 'mu4e-shr2text)

  (defun binarin/mu4e-view-mode-hook ()
    (yas-minor-mode nil)
    (setf fill-column 80)
    (visual-line-mode t)
    ;; (visual-fill-column-mode t)
    )

  (add-hook 'mu4e-view-mode-hook #'binarin/mu4e-view-mode-hook)

  (setq mu4e-view-show-images t)

  (setq mu4e-headers-show-threads t)

  ;; use 'fancy' non-ascii characters in various places in mu4e
  (setq mu4e-use-fancy-chars nil)

  (setf mu4e-headers-fields '((:human-date . 12)
                              (:flags . 6)
                              (:mailing-list . 10)
                              (:from . 22)
                              (:thread-subject)))
#+end_src

*** Behaviour
    :PROPERTIES:
    :ID:       2721952e-54d4-423b-8b65-cbb580f4f2d4
    :END:

    mu4e regenerates main buffer on exiting headers view. But it's annoying when main buffer also
    contains mu4e-maildirs-extension output, because position is lost and it's inconvinient for
    reading unread mailboxes sequentially.
    #+begin_src emacs-lisp
      (defun binarin/mu4e~headers-quit-buffer--non-destructive ()
        (interactive)
        (aif (get-buffer mu4e~main-buffer-name)
            (cl-letf (((symbol-function 'mu4e~main-view) (lambda () nil)))
              (mu4e~headers-quit-buffer)
              (switch-to-buffer it))
            (mu4e~headers-quit-buffer)))

      (eval-after-load "mu4e"
        #'(lambda () (define-key mu4e-headers-mode-map (kbd "q") #'binarin/mu4e~headers-quit-buffer--non-destructive)))
    #+end_src

    Sync mail in background after exiting mu4e
    #+begin_src emacs-lisp
      (defun binarin/mu4e-quit ()
        (interactive)
        (mu4e-update-mail-and-index t)
        (mu4e-quit))

      (eval-after-load "mu4e"
        '(define-key mu4e-main-mode-map "q" #'binarin/mu4e-quit))
    #+end_src


    This is needed for mbsync compatibility:
    #+begin_src emacs-lisp
      (setf mu4e-change-filenames-when-moving t)
    #+end_src

    Don't save messages to Sent Messages, Gmail/IMAP takes care of this.
    #+begin_src emacs-lisp
      (setq mu4e-sent-messages-behavior 'delete)
    #+end_src

    Use helm for completion
    #+begin_src emacs-lisp
      (defun binarin/mu4e-read-option (prompt options)
        (helm-comp-read prompt (-map (lambda (option)
                                       (cons (replace-regexp-in-string "^\\(.\\)" "[\\1]" (car option))
                                             (cdr option)))
                                     options)
                        ;; :sort #'(lambda (a b)
                        ;;           (string-lessp (car a) (car b)))
                        ))

      (eval-after-load "mu4e" '(fset 'mu4e-read-option 'binarin/mu4e-read-option))
    #+end_src

    Mark messages as read while refiling
    #+begin_src emacs-lisp
      (eval-after-load "mu4e"
        #'(lambda ()
            (setf (cdr (assoc 'refile mu4e-marks))
                  '(:char ("r" . "▶")
                          :prompt "refile"
                          :dyn-target (lambda (target msg) (mu4e-get-refile-folder msg))
                          :action (lambda (docid msg target)
                                    (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N"))))))
    #+end_src

    #+begin_src emacs-lisp
      ;; save attachment to my desktop (this can also be a function)
        (setq mu4e-attachment-dir "~/Downloads")

      (setf mu4e-hide-index-messages t)
      (setf mu4e-get-mail-command "true")
      (setf mu4e-confirm-quit nil
            mu4e-headers-leave-behavior 'apply)

      (defun binarin/lazy-load-org-mu4e ()
        (autoload 'org-mu4e-open "org-mu4e")
        (autoload 'org-mu4e-store-link "org-mu4e")
        (org-link-set-parameters "mu4e"
                                 :follow #'org-mu4e-open
                                 :store #'org-mu4e-store-link))

      (eval-after-load "org" '(when (fboundp 'mu4e) (binarin/lazy-load-org-mu4e)))

      ;; (defhydra binarin/mu4e-hydra (:exit t :color red)
      ;;   "Some useful mu4e bookmarks"
      ;;   ("i" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "maildir:/INBOX")) "INBOX")
      ;;   ("u" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "flag:unread AND NOT maildir:/Trash and NOT maildir:/Lists.Yandex.bbs and NOT maildir:/Yandex.bike")) "Unread work messages")
      ;;   ("f" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "flag:unread AND NOT maildir:/Trash and NOT maildir:/Yandex.direct-dev and NOT maildir:/Yandex.direct-review and NOT maildir:/Yandex.perl-dev and NOT maildir:/Yandex.redrose-announces and NOT maildir:/Yandex.staff and NOT maildir:/INBOX")) "Unread fun messages"))


      ;; (global-set-key (kbd "<f9>") #'binarin/mu4e-hydra/body)
    #+end_src

** IRC
   #+begin_src emacs-lisp
     (defun binarin/get-bitlbee-password ()
       (awhen (auth-source-search :host "bitlbee" :max 1)
         (funcall (plist-get (car it) :secret))))

     (setf circe-network-options `(("Freenode"
                                    :channels ("#erlang" "#erlounge" "#rabbitmq" "#nixos" "#haskell" "#reflex-frp"))
                                   ("my bitlbee"
                                    :pass ,(binarin/get-bitlbee-password)
                                    :nick "binarin"
                                    :realname "Alexey Lebedeff"
                                    :channels ("#spdata" "#live" "#hackers")
                                    :nickserv-mask "\\(bitlbee\\|root\\)!\\(bitlbee\\|root\\)@"
                                    :nickserv-identify-challenge "use the \x02identify\x02 command to identify yourself"
                                    :nickserv-identify-command "PRIVMSG &bitlbee :identify {password}"
                                    :nickserv-identify-confirmation "Password accepted, settings and accounts loaded"
                                    :nickserv-nick "binarin"
                                    :nickserv-password ,(binarin/get-bitlbee-password)
                                    :host "127.0.0.1"
                                    :port 6667)))

     (setf circe-reduce-lurker-spam t)

     (eval-after-load "circe"
       (lambda ()
         (require 'circe-color-nicks)
         (enable-circe-color-nicks)
         (load "lui-logging" nil t)
         (enable-lui-logging-globally)))

         (global-set-key (kbd "<f8>") #'tracking-next-buffer)

     (defun irc ()
       (interactive)
       (circe "Freenode")
       (circe "my bitlbee"))


     (defun binarin/circe-chat-mode-hook ()
       (emojify-mode)
       (lui-set-prompt
        (concat (propertize (concat (buffer-name) ">")
        'face 'circe-prompt-face)
                " ")))

     (add-hook 'circe-chat-mode-hook #'binarin/circe-chat-mode-hook)

     (setq lui-flyspell-p t
           lui-flyspell-alist '((".*" "american")))

     (setq
      lui-time-stamp-position 'right-margin
      lui-time-stamp-format "%H:%M")

     (add-hook 'lui-mode-hook 'my-circe-set-margin)
     (defun my-circe-set-margin ()
       (setq right-margin-width 5))

   #+end_src

** Jabber
   #+BEGIN_SRC emacs-lisp
     (setf jabber-account-list '(("alexey.lebedeff@booking.com")))
     (setf jabber-activity-make-strings #'jabber-activity-make-strings-shorten)

     (setf jabber-auto-reconnect t)
     (setf jabber-history-enabled t)
     (setf jabber-groupchat-buffer-format "#%n")
     (setf jabber-chat-fill-long-lines t)
     (setf jabber-alert-muc-hooks nil
           jabber-alert-presence-hooks nil)

     (defun binarin/jabber-hook ()
       (emojify-mode)
       (flyspell-mode)
       (setf fill-column 80))
     (add-hook 'jabber-chat-mode-hook #'binarin/jabber-hook)

     (setf jabber-muc-colorize-local t
           jabber-muc-colorize-foreign t)

     ;; use this if you don't like all those notices about people joining/leaving
     (defun binarin/jabber-muc-process-presence-remove-notices (jc presence)
       (let* ((from (jabber-xml-get-attribute presence 'from))
              (group (jabber-jid-user from))
              (buffer (get-buffer (jabber-muc-get-buffer group))))
         (if buffer
             (with-current-buffer buffer
               (ewoc-filter jabber-chat-ewoc (lambda (elt) (not (eq (car elt) :muc-notice))))))))

     (advice-add 'jabber-muc-process-presence :after #'binarin/jabber-muc-process-presence-remove-notices)

     ;; 1st time fix it after autoloads
     (eval-after-load "jabber-autoloads"
       #'(lambda ()
           ;; (global-set-key (kbd "<f8>") #'jabber-activity-switch-to)
           (global-set-key (kbd "C-z C-j") jabber-global-keymap)
           (global-set-key (kbd "C-x C-j") #'dired-jump)))

     ;; 2nd - after actually loading jabber
     (eval-after-load "jabber-keymap"
       #'(lambda ()
           (global-set-key (kbd "C-x C-j") #'dired-jumpo)))
   #+END_SRC
* Programming
** helm-dash for documentation
   #+BEGIN_SRC emacs-lisp
     (defun binarin/helm-dash-browse-url (url &optional session)
       (other-window 1)
       (xwidget-browse-url-no-reuse url))

     (setf helm-dash-browser-func #'binarin/helm-dash-browse-url)
   #+END_SRC
** Tags
   #+BEGIN_SRC emacs-lisp
     (setf tags-revert-without-query t)
   #+END_SRC
** Elixir
   #+BEGIN_SRC emacs-lisp
     (add-hook 'elixir-mode-hook 'alchemist-mode)
     (add-hook 'elixir-mode-hook 'company-mode)
   #+END_SRC
** Elm
   #+BEGIN_SRC emacs-lisp
     (defun binarin/elm-mode-hook ()
       (company-mode-on))

     (add-hook 'elm-mode-hook #'binarin/elm-mode-hook)

     (eval-after-load "elm-mode"
       (lambda ()
         (require 'company)
         (add-to-list 'company-backends 'company-elm)))
   #+END_SRC
** Erlang
   :PROPERTIES:
   :ID:       f947b108-a5c9-4806-85fc-90592ca8f19a
   :ARCHIVE_TIME: 2016-06-18 Сб 22:49
   :ARCHIVE_FILE: ~/.rc/emacs-config.org
   :ARCHIVE_OLPATH: Programming
   :ARCHIVE_CATEGORY: emacs-config
   :END:

   #+begin_src emacs-lisp
     (defun binarin/erlang-mode-hook ()
       (local-set-key (kbd "M-*") #'edts-find-source-unwind))

     ;; (add-hook 'erlang-mode-hook 'binarin/erlang-mode-hook)

     ;; (when (f-dir? "~/personal-workspace/edts")
     ;;   (setf edts-inhibit-package-check t)
     ;;   (add-to-list 'load-path "~/personal-workspace/edts")
     ;;   (require 'edts-start))
   #+end_src

** Emacs Lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'example-mode-hook 'elisp-slime-nav-mode)
     (add-hook 'example-mode-hook 'eldoc-mode)
     (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
     (add-hook 'ielm-mode-hook 'eldoc-mode)
     (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
     (add-hook 'emacs-lisp-mode-hook 'easy-escape-minor-mode)

     (eval-after-load "easy-escape"
       (lambda ()
         (set-face-attribute 'easy-escape-face nil :foreground "red2")
         (set-face-attribute 'easy-escape-delimiter-face nil :foreground "red3")))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'haskell-mode-hook 'intero-mode-whitelist)
     ;; (autoload 'intero-mode-whitelist "intero")
     ;; (setf intero-whitelist '("~/personal-workspace/learnopengl"))
     (setf haskell-indent-spaces 4)
     (setf haskell-stylish-on-save nil)
     (setf haskell-tags-on-save t)
     (setf haskell-process-suggest-remove-import-lines t)
     (setf haskell-process-auto-import-loaded-modules t)
     (setf haskell-process-suggest-hoogle-imports t)
     (setf haskell-process-use-presentation-mode t)
     (setf haskell-process-log t)
     (setf haskell-process-type 'cabal-new-repl)
     (setf haskell-process-args-cabal-new-repl '("--ghc-option=-ferror-spans" "--ghc-option=-fno-diagnostics-show-caret" "--ghc-option=-fshow-loaded-modules"))

     (defun binarin/haskell-mode-hook ()
       (company-mode t)
       (dante-mode t)
       (flycheck-mode t)
       (interactive-haskell-mode t)
       ;; (structured-haskell-mode t)
       (flyspell-prog-mode t)
       (set (make-local-variable 'company-backends)
            (append '((company-capf company-dabbrev-code company-yasnippet))
                    company-backends)))

     (eval-after-load "haskell"
       (lambda ()
         (define-key interactive-haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)
         (define-key interactive-haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)))

     (eval-after-load "haskell-mode"
       (lambda ()
         (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile)
         (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)))

     (eval-after-load "haskell-cabal"
       (lambda ()
         (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile)))

     (add-hook 'haskell-mode-hook 'binarin/haskell-mode-hook)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (defun binarin/haskell-session-installed-modules (_session &optional _dontcreate)
       (let ((session (haskell-session-maybe))
             result)
         (when session
           (with-temp-buffer
             (call-process "ghc-pkg" nil t nil "dump" "--simple-output")
             (goto-char (point-min))
             (awhile (and (re-search-forward "exposed-modules:\n\\(\\( +.*\n\\)+\\)" nil t)
                          (goto-char (match-end 0)) ;; so nobody will mess with our match
                          (match-string 1))
               (setf result (nconc (split-string it) result)))))
         result))

     (defun binarin/haskell-session-installed-modules-advice (orig-fun &rest args)
       (apply #'binarin/haskell-session-installed-modules args))

     (advice-add 'haskell-session-installed-modules :around #'binarin/haskell-session-installed-modules-advice)

     (defun binarin/haskell-add-import (&optional scope qualified)
       (let ((modules-fn (if (eq scope :local)
                             #'haskell-session-project-modules
                           #'haskell-session-installed-modules)))
         (awhen (ivy-read "Module: " (funcall modules-fn (haskell-modules-session)))
           (goto-char (point-max))
           (haskell-navigate-imports)
           (when (eq scope :local) ;; try to choose the second group of imports
             (haskell-navigate-imports))
           (if (not qualified)
               (insert "import " it "\n")
             (let ((qualification (read-from-minibuffer "Qualifiy as: ")))
               (when qualification
                 (insert "import qualified " it " as " qualification "\n"))))
           (haskell-align-imports))))

     (defun binarin/haskell-add-global-import (prefix)
       (interactive "P")
       (binarin/haskell-add-import :global prefix))

     (defun binarin/haskell-add-local-import (prefix)
       (interactive "P")
       (binarin/haskell-add-import :local prefix))

     (eval-after-load "haskell-mode"
       (lambda ()
         (define-key haskell-mode-map (kbd "C-c i") #'binarin/haskell-add-global-import)
         (define-key haskell-mode-map (kbd "C-c l") #'binarin/haskell-add-local-import)))
   #+END_SRC
** Perl

   #+BEGIN_SRC emacs-lisp

     (defun binarin/system-to-string (command &rest args)
       "Execute command COMMAND with arguments ARGS and return its output as a string."
       (with-output-to-string
         (with-current-buffer
           standard-output
           (apply #'process-file command nil t nil args))))

     (defun binarin/all-perl-modules ()
       (let ((perl-code "
     use File::Find::Rule;

     sub modulize {
       for ($_[0]) {
         s/\.pm$//;
         s|/|::|g;
       }
       $_;
     }

     $SIG{__WARN__} = sub { }; # some silly warning from File::Find::Rule about our silliness =)

     my @files = map {modulize $_} File::Find::Rule->extras({follow => 1})->relative->file()->name( q{*.pm} )->in( @INC );

     say for sort @files;

     "))
         (s-lines (binarin/system-to-string "booking-perl" "-E" perl-code))))

     (defun binarin/insert-perl-import (module)
       (end-of-line)
         (insert "\n")
         (beginning-of-line)
         (insert "use " module ";"))

     (defun binarin/choose-perl-import ()
       (interactive "")
       (ivy-read "Module name: " (binarin/all-perl-modules) :action #'binarin/insert-perl-import))

   #+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
     (defun binarin/python-mode-hook ()
       (setf whitespace-style '(tabs trailing tab-mark face lines-tail))
       (whitespace-mode 1))

     (add-hook 'python-mode-hook #'binarin/python-mode-hook)
   #+END_SRC
** HTML
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
     (eval-after-load "web-mode"
       (lambda ()
         (setf web-mode-enable-engine-detection t)
         (add-to-list 'web-mode-engines-alist '("go" . "\\.html\\'"))))

     (defun binarin/less-css-mode-hook ()
       (firestarter-mode)
       (setf firestarter
             '(projectile-with-default-dir (projectile-project-root)
                (let ((display-buffer-alist '(("^*Async Shell Command*" . (display-buffer-no-window)))))
                  (async-shell-command "make"))
                )))

     (add-hook 'less-css-mode-hook #'binarin/less-css-mode-hook)

   #+END_SRC
* Keybindings
** Default global keybindings (for reference)
   :PROPERTIES:
   :ID:       a4ffc76e-7fe0-41d4-8026-13c778ef2e79
   :END:
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| ESC          |        | ESC-prefix                           |      |                                   | keymap                           |                         |                                   |                         |                         |
| <f1>         |        | help-command                         |      |                                   |                                  |                         |                                   |                         |                         |
| <f2>         |        | 2C-command                           |      |                                   |                                  |                         |                                   |                         |                         |
| <f3>         |        | kmacro-start-macro-or-insert-counter |      |                                   |                                  |                         |                                   |                         |                         |
| <f4>         |        | kmacro-end-or-call-macro             |      |                                   |                                  |                         |                                   |                         |                         |
| <f5>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f6>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f7>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f8>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f9>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f10>        |        | menu-bar-open                        |      | buffer-menu-open                  | toggle-frame-maximized           |                         |                                   |                         |                         |
| <f11>        |        | toggle-frame-fullscreen              |      |                                   |                                  |                         |                                   |                         |                         |
| <f12>        |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <home>       |        | move-beginning-of-line               |      | beginning-of-buffer               | beginning-of-buffer-other-window | beginning-of-defun      |                                   |                         |                         |
| <end>        |        | move-end-of-line                     |      | end-of-buffer                     | end-of-buffer-other-window       | end-of-defun            |                                   |                         |                         |
| <insert>     |        | overwrite-mode                       | yank | kill-ring-save                    |                                  |                         |                                   |                         |                         |
| <deletechar> |        | delete-forward-char                  |      |                                   |                                  |                         |                                   |                         |                         |
| DEL          |        | delete-backward-char                 |      |                                   | backward-kill-word               |                         |                                   |                         |                         |
| RET          |        | newline                              |      |                                   |                                  |                         |                                   |                         |                         |
| <prior>      |        | scroll-down-command                  |      | scroll-right                      | scroll-other-window-down         |                         |                                   |                         |                         |
| <next>       |        | scroll-up-command                    |      | scroll-left                       | scroll-other-window              |                         |                                   |                         |                         |
| <tab>        |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <left>       |        | left-char                            |      | left-word                         | left-word                        | backward-sexp           |                                   |                         |                         |
| <right>      |        | right-char                           |      | right-word                        | right-word                       | forward-sexp            |                                   |                         |                         |
| <up>         |        | previous-line                        |      | backward-paragraph                |                                  | backward-up-list        |                                   |                         |                         |
| <down>       |        | next-line                            |      | forward-paragraph                 |                                  | down-list               |                                   |                         |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| `ǁ~          | $ǁ~    | self                                 | self |                                   | ispell-word                      |                         |                                   | not-modified            |                         |
| 1ǁ!          | &ǁ%    | self                                 | self |                                   | async-shell-command              |                         |                                   | query-replace           | query-replace-regexp    |
| 2ǁ@          | [ǁ7    | self                                 | self | ESC-prefix                        |                                  | keymap                  | digit-argument                    | digit-argument          | digit-argument          |
| 3ǁ#          | {ǁ5    | self                                 | self |                                   | backward-paragraph               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 4ǁ$          | }ǁ3    | self                                 | self |                                   | forward-paragraph                |                         | digit-argument                    | digit-argument          | digit-argument          |
| 5ǁ%          | (ǁ1    | self                                 | self |                                   | insert-parentheses               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 6ǁ^          | "=ǁ9"  | self                                 | self |                                   | count-words-region               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 7ǁ&          | *ǁ0    | self                                 | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 8ǁ*          | )ǁ2    | self                                 | self |                                   | move-past-close-and-reindent     |                         | digit-argument                    | digit-argument          | digit-argument          |
| 9ǁ(          | +ǁ4    | self                                 | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 0ǁ)          | ]ǁ6    | self                                 | self | abort-recursive-edit              |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| -ǁ_          | !ǁ8    | self                                 | self |                                   | shell-command                    |                         | digit-argument                    | digit-argument          | digit-argument          |
| "=ǁ+"        | #ǁ`    | self                                 | self |                                   |                                  |                         |                                   | tmm-menubar             |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| qǁQ          | ;ǁ:    | self                                 | self |                                   | comment-dwim                     |                         |                                   | eval-expression         |                         |
| wǁW          | ,ǁ<    | self                                 | self |                                   | xref-pop-marker-stack            |                         |                                   | beginning-of-buffer     |                         |
| eǁE          | .ǁ>    | self                                 | self |                                   | xref-find-definitions            | xref-find-apropos       |                                   | end-of-buffer           |                         |
| rǁR          | pǁP    | self                                 | self | previous-line                     |                                  | backward-list           | previous-line                     |                         | backward-list           |
| tǁT          | yǁY    | self                                 | self | yank                              | yank-pop                         |                         | yank                              |                         |                         |
| yǁY          | fǁF    | self                                 | self | forward-char                      | forward-word                     | forward-sexp            | forward-char                      |                         | forward-sexp            |
| uǁU          | gǁG    | self                                 | self | keyboard-quit                     | keymap                           |                         | keyboard-quit                     |                         |                         |
| iǁI          | cǁC    | self                                 | self | mode-specific-command-prefix      | capitalize-word                  | exit-recursive-edit     | mode-specific-command-prefix      |                         | exit-recursive-edit     |
| oǁO          | rǁR    | self                                 | self | isearch-backward                  | move-to-window-line-top-bottom   | isearch-backward-regexp | isearch-backward                  |                         | isearch-backward-regexp |
| pǁP          | lǁL    | self                                 | self | recenter-top-bottom               | downcase-word                    | reposition-window       | recenter-top-bottom               |                         | reposition-window       |
| [ǁ{          | /ǁ?    | self                                 | self | undo                              | dabbrev-expand                   | dabbrev-completion      |                                   | xref-find-references    |                         |
| ]ǁ}          | @ǁ^    | self                                 | self | set-mark-command                  | mark-word                        | mark-sexp               |                                   | delete-indentation      |                         |
| \ǁpipe       | \ǁpipe | self                                 | self | toggle-input-method               | delete-horizontal-space          | indent-region           |                                   | shell-command-on-region |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| aǁA          | aǁA    | self                                 | self | move-beginning-of-line            | backward-sentence                | beginning-of-defun      | move-beginning-of-line            |                         | beginning-of-defun      |
| sǁS          | oǁO    | self                                 | self | open-line                         | facemenu-keymap                  | split-line              | open-line                         |                         | split-line              |
| dǁD          | eǁE    | self                                 | self | move-end-of-line                  | forward-sentence                 | end-of-defun            | move-end-of-line                  |                         | end-of-defun            |
| fǁF          | uǁU    | self                                 | self | universal-argument                | upcase-word                      | backward-up-list        | universal-argument                |                         | backward-up-list        |
| gǁG          | iǁI    | self                                 | self | indent-for-tab-command            | tab-to-tab-stop                  | complete-symbol         | indent-for-tab-command            |                         | complete-symbol         |
| hǁH          | dǁD    | self                                 | self | delete-char                       | kill-word                        | down-list               | delete-char                       |                         | down-list               |
| jǁJ          | hǁH    | self                                 | self | help-command                      | mark-paragraph                   | mark-defun              | help-command                      |                         | mark-defun              |
| kǁK          | tǁT    | self                                 | self | transpose-chars                   | transpose-words                  | transpose-sexps         | transpose-chars                   |                         | transpose-sexps         |
| lǁL          | nǁN    | self                                 | self | next-line                         |                                  | forward-list            | next-line                         |                         | forward-list            |
| ;ǁ:          | sǁS    | self                                 | self | isearch-forward                   | keymap                           | isearch-forward-regexp  | isearch-forward                   |                         | isearch-forward-regexp  |
| 'ǁ"          | -ǁ_    | self                                 | self | negative-argument                 | negative-argument                | negative-argument       | undo                              |                         |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| zǁZ          | 'ǁ"    | self                                 | self |                                   | abbrev-prefix-mark               |                         |                                   |                         |                         |
| xǁX          | qǁQ    | self                                 | self | quoted-insert                     | fill-paragraph                   |                         | quoted-insert                     |                         |                         |
| cǁC          | jǁJ    | self                                 | self | electric-newline-and-maybe-indent | indent-new-comment-line          | indent-new-comment-line | electric-newline-and-maybe-indent |                         | indent-new-comment-line |
| vǁV          | kǁK    | self                                 | self | kill-line                         | kill-sentence                    | kill-sexp               | kill-line                         |                         | kill-sexp               |
| bǁB          | xǁX    | self                                 | self | Control-X-prefix                  | execute-extended-command         |                         | Control-X-prefix                  |                         |                         |
| nǁN          | bǁB    | self                                 | self | backward-char                     | backward-word                    | backward-sexp           | backward-char                     |                         | backward-sexp           |
| mǁM          | mǁM    | self                                 | self | newline                           | back-to-indentation              |                         | newline                           |                         |                         |
| ,ǁ<          | wǁW    | self                                 | self | kill-region                       | kill-ring-save                   | append-next-kill        | kill-region                       |                         | append-next-kill        |
| .ǁ>          | vǁV    | self                                 | self | scroll-up-command                 | scroll-down-command              | scroll-other-window     | scroll-up-command                 |                         | scroll-other-window     |
| /ǁ?          | zǁZ    | self                                 | self | suspend-frame                     | zap-to-char                      |                         | suspend-frame                     |                         |                         |

** Global keybindings overview (regenerate manually)

   #+BEGIN_SRC emacs-lisp
     (defun binarin/lookup-keybinding-in-formula (ascii dvp mod-string shift)
       (if (string= ascii "QWE")
           (concat mod-string (if shift "S-" ""))
         (binarin/lookup-keybinding-in-formula-1 ascii dvp mod-string shift)))

     (defun binarin/lookup-keybinding-in-formula-1 (ascii dvp mod-string shift)
       (let* ((unquoted-dvp (if (and (s-starts-with? "\"" dvp)
                                     (s-ends-with? "\"" dvp))
                                (org-remove-double-quotes dvp)
                              dvp))
              (primary-key
               (if (= 0 (length dvp))
                   ascii
                 (car (split-string unquoted-dvp "ǁ"))))
              (norm-primary-key (cond
                                 ((string= primary-key "pipe") "|")
                                 (t primary-key)))
              (shifted-key (second (split-string unquoted-dvp "ǁ")))
              (norm-shifted-key (cond
                                 ((string= shifted-key "pipe") "|")
                                 (t shifted-key)))
              (shift-string (if (and shift (not shifted-key)) "S-" ""))
              (key (if (and shift shifted-key) norm-shifted-key norm-primary-key))
              (full-key-string (concat mod-string shift-string key))
              (command (lookup-key (current-global-map) (kbd full-key-string))))
         (cond
          ((null command) "")
          ((eq command 'self-insert-command) "self")
          ((symbolp command) (format "%s" command))
          ((keymapp command) "keymap")
          (t (format "%s" command)))))
   #+END_SRC

|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| ESC          |        | ESC-prefix             |      |                                   | keymap                           |                         |                                   |                         |                         |
| <f1>         |        | help-command           |      |                                   |                                  |                         |                                   |                         |                         |
| <f2>         |        | save-buffer            |      |                                   |                                  |                         |                                   |                         |                         |
| <f3>         |        | helm-find-files        |      | binarin/kill-current-buffer       |                                  |                         |                                   |                         |                         |
| <f4>         |        | replace-string         |      | replace-regexp                    |                                  |                         |                                   |                         |                         |
| <f5>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f6>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f7>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f8>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f9>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f10>        |        | menu-bar-open          |      | buffer-menu-open                  | toggle-frame-maximized           |                         |                                   |                         |                         |
| <f11>        |        | org-clock-goto         |      | org-clock-in                      |                                  |                         |                                   |                         |                         |
| <f12>        |        | magit-status           |      |                                   |                                  |                         |                                   |                         |                         |
| <home>       |        | move-beginning-of-line |      | beginning-of-buffer               | beginning-of-buffer-other-window | beginning-of-defun      |                                   |                         |                         |
| <end>        |        | move-end-of-line       |      | end-of-buffer                     | end-of-buffer-other-window       | end-of-defun            |                                   |                         |                         |
| <insert>     |        | overwrite-mode         | yank | kill-ring-save                    |                                  |                         |                                   |                         |                         |
| <deletechar> |        | delete-forward-char    |      |                                   |                                  |                         |                                   |                         |                         |
| DEL          |        | delete-backward-char   |      |                                   | backward-kill-word               |                         |                                   |                         |                         |
| RET          |        | newline                |      |                                   |                                  |                         |                                   |                         |                         |
| <prior>      |        | scroll-down-command    |      | scroll-right                      | scroll-other-window-down         |                         |                                   |                         |                         |
| <next>       |        | scroll-up-command      |      | scroll-left                       | scroll-other-window              |                         |                                   |                         |                         |
| <tab>        |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <left>       |        | left-char              |      | left-word                         | left-word                        | backward-sexp           |                                   |                         |                         |
| <right>      |        | right-char             |      | right-word                        | right-word                       | forward-sexp            |                                   |                         |                         |
| <up>         |        | previous-line          |      | backward-paragraph                |                                  | backward-up-list        |                                   |                         |                         |
| <down>       |        | next-line              |      | forward-paragraph                 |                                  | down-list               |                                   |                         |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| `ǁ~          | $ǁ~    | self                   | self |                                   | ispell-word                      |                         |                                   | not-modified            |                         |
| 1ǁ!          | &ǁ%    | self                   | self |                                   | delete-other-windows             |                         |                                   | query-replace           | query-replace-regexp    |
| 2ǁ@          | [ǁ7    | self                   | self | ESC-prefix                        | split-window-below               | keymap                  | digit-argument                    | digit-argument          | digit-argument          |
| 3ǁ#          | {ǁ5    | self                   | self |                                   | split-window-right               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 4ǁ$          | }ǁ3    | self                   | self |                                   | forward-paragraph                |                         | digit-argument                    | digit-argument          | digit-argument          |
| 5ǁ%          | (ǁ1    | self                   | self |                                   | insert-parentheses               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 6ǁ^          | "=ǁ9"  | self                   | self |                                   | count-words-region               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 7ǁ&          | *ǁ0    | self                   | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 8ǁ*          | )ǁ2    | self                   | self |                                   | move-past-close-and-reindent     |                         | digit-argument                    | digit-argument          | digit-argument          |
| 9ǁ(          | +ǁ4    | self                   | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 0ǁ)          | ]ǁ6    | self                   | self | abort-recursive-edit              |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| -ǁ_          | !ǁ8    | self                   | self | binarin/projectile-eshell         | shell-command                    |                         | digit-argument                    | digit-argument          | digit-argument          |
| "=ǁ+"        | #ǁ`    | self                   | self |                                   |                                  |                         |                                   | tmm-menubar             |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| qǁQ          | ;ǁ:    | self                   | self |                                   | comment-dwim                     |                         |                                   | eval-expression         |                         |
| wǁW          | ,ǁ<    | self                   | self |                                   | xref-pop-marker-stack            |                         |                                   | beginning-of-buffer     |                         |
| eǁE          | .ǁ>    | self                   | self |                                   | xref-find-definitions            | xref-find-apropos       |                                   | end-of-buffer           |                         |
| rǁR          | pǁP    | self                   | self | previous-line                     |                                  | backward-list           | previous-line                     |                         | backward-list           |
| tǁT          | yǁY    | self                   | self | yank                              | helm-show-kill-ring              |                         | yank                              |                         |                         |
| yǁY          | fǁF    | self                   | self | forward-char                      | forward-word                     | forward-sexp            | forward-char                      |                         | forward-sexp            |
| uǁU          | gǁG    | self                   | self | keyboard-quit                     | keymap                           |                         | keyboard-quit                     |                         |                         |
| iǁI          | cǁC    | self                   | self | mode-specific-command-prefix      | capitalize-word                  | exit-recursive-edit     | mode-specific-command-prefix      |                         | exit-recursive-edit     |
| oǁO          | rǁR    | self                   | self | isearch-backward                  | move-to-window-line-top-bottom   | isearch-backward-regexp | isearch-backward                  |                         | isearch-backward-regexp |
| pǁP          | lǁL    | self                   | self | recenter-top-bottom               | downcase-word                    | reposition-window       | recenter-top-bottom               |                         | reposition-window       |
| [ǁ{          | /ǁ?    | self                   | self | undo                              | dabbrev-expand                   | dabbrev-completion      |                                   | xref-find-references    |                         |
| ]ǁ}          | @ǁ^    | self                   | self | set-mark-command                  | mark-word                        | mark-sexp               |                                   | delete-indentation      |                         |
| \ǁpipe       | \ǁpipe | self                   | self | toggle-input-method               | delete-horizontal-space          | indent-region           |                                   | shell-command-on-region |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| aǁA          | aǁA    | self                   | self | move-beginning-of-line            | backward-sentence                | beginning-of-defun      | move-beginning-of-line            |                         | beginning-of-defun      |
| sǁS          | oǁO    | self                   | self | open-line                         | other-window                     | split-line              | open-line                         |                         | split-line              |
| dǁD          | eǁE    | self                   | self | move-end-of-line                  | forward-sentence                 | end-of-defun            | move-end-of-line                  |                         | end-of-defun            |
| fǁF          | uǁU    | self                   | self | universal-argument                | upcase-word                      | backward-up-list        | universal-argument                |                         | backward-up-list        |
| gǁG          | iǁI    | self                   | self | indent-for-tab-command            | tab-to-tab-stop                  | complete-symbol         | indent-for-tab-command            |                         | complete-symbol         |
| hǁH          | dǁD    | self                   | self | delete-char                       | kill-word                        | down-list               | delete-char                       |                         | down-list               |
| jǁJ          | hǁH    | self                   | self | help-command                      | mark-paragraph                   | mark-defun              | help-command                      |                         | mark-defun              |
| kǁK          | tǁT    | self                   | self | transpose-chars                   | transpose-words                  | transpose-sexps         | transpose-chars                   |                         | transpose-sexps         |
| lǁL          | nǁN    | self                   | self | next-line                         | delete-window                    | forward-list            | next-line                         |                         | forward-list            |
| ;ǁ:          | sǁS    | self                   | self | isearch-forward                   | keymap                           | isearch-forward-regexp  | isearch-forward                   |                         | isearch-forward-regexp  |
| 'ǁ"          | -ǁ_    | self                   | self | negative-argument                 | negative-argument                | negative-argument       | undo                              |                         |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| zǁZ          | 'ǁ"    | self                   | self |                                   | abbrev-prefix-mark               |                         |                                   |                         |                         |
| xǁX          | qǁQ    | self                   | self | quoted-insert                     | fill-paragraph                   |                         | quoted-insert                     |                         |                         |
| cǁC          | jǁJ    | self                   | self | electric-newline-and-maybe-indent | indent-new-comment-line          | indent-new-comment-line | electric-newline-and-maybe-indent |                         | indent-new-comment-line |
| vǁV          | kǁK    | self                   | self | kill-line                         | kill-sentence                    | kill-sexp               | kill-line                         |                         | kill-sexp               |
| bǁB          | xǁX    | self                   | self | Control-X-prefix                  | helm-M-x                         |                         | Control-X-prefix                  |                         |                         |
| nǁN          | bǁB    | self                   | self | backward-char                     | backward-word                    | backward-sexp           | backward-char                     |                         | backward-sexp           |
| mǁM          | mǁM    | self                   | self | newline                           | back-to-indentation              |                         | newline                           |                         |                         |
| ,ǁ<          | wǁW    | self                   | self | kill-region                       | kill-ring-save                   | append-next-kill        | kill-region                       |                         | append-next-kill        |
| .ǁ>          | vǁV    | self                   | self | scroll-up-command                 | scroll-down-command              | scroll-other-window     | scroll-up-command                 |                         | scroll-other-window     |
| /ǁ?          | zǁZ    | self                   | self | keymap                            | zap-to-char                      |                         | keymap                            |                         |                         |
#+TBLFM: $3='(binarin/lookup-keybinding-in-formula $1 $2 "" nil)::$4='(binarin/lookup-keybinding-in-formula $1 $2 "" t)::$5='(binarin/lookup-keybinding-in-formula $1 $2 "C-" nil)::$6='(binarin/lookup-keybinding-in-formula $1 $2 "M-" nil)::$7='(binarin/lookup-keybinding-in-formula $1 $2 "C-M-" nil)::$8='(binarin/lookup-keybinding-in-formula $1 $2 "C-" t)::$9='(binarin/lookup-keybinding-in-formula $1 $2 "M-" t)::$10='(binarin/lookup-keybinding-in-formula $1 $2 "C-M-" t)

** Other keybindings

   #+BEGIN_SRC emacs-lisp
     (general-define-key "M-SPC" 'cycle-spacing)
   #+END_SRC

  #+begin_src emacs-lisp
    (global-set-key (kbd "M-&") 'delete-other-windows)
    ;; (global-set-key (kbd "M-[") 'split-window-below) -- fucks up bracketed-paste in terminal
    (global-set-key (kbd "M-{") 'split-window-right)
    (define-key org-mode-map (kbd "M-{") 'split-window-right)

    ;;(global-set-key (kbd "M-o") 'other-window)
    ;;(global-set-key (kbd "M-o") 'next-multiframe-window)
    (defun binarin/other-window-multiframe ()
      (interactive)
      (other-window 1 'visible)
      (select-frame-set-input-focus (selected-frame)))
    (global-set-key (kbd "M-o") #'binarin/other-window-multiframe)
    (global-set-key (kbd "M-n") 'delete-window)

  #+end_src

  #+begin_src emacs-lisp
    (global-set-key "\e\eb" (lambda () (interactive) (switch-to-buffer (other-buffer))))
    (global-set-key "\e\ec" 'comment-region)
    (global-set-key "\e\ei" 'indent-region)
    (global-set-key "\e\el" 'goto-line)
    (global-set-key "\e\et" 'toggle-truncate-lines)

    (global-set-key [f2]  'save-buffer)

  #+end_src

* File footer
  :PROPERTIES:
  :ID:       06755181-420b-4911-80a7-cfec7cc4b655
  :END:
