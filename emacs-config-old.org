#+TITLE: binarin's emacs configuration
#+OPTIONS: toc:4 h:4
* Configuration pieces from other places
** Finding configuration pieces from optional directories
   #+begin_src emacs-lisp
     (defvar binarin/optional-config-repos-dir (expand-file-name "~/.rc.d/"))
     (defvar binarin/optional-config-repos (-map #'file-name-as-directory (directory-files binarin/optional-config-repos-dir t "^[0-9a-zA-Z]")))

     (defun binarin/optional-repo-files (filename)
       (loop for dir in binarin/optional-config-repos
             for fullname = (concat dir filename)
             when (file-exists-p fullname)
             collect fullname))
   #+end_src

** Search for authinfo files
   #+begin_src emacs-lisp
     (setf auth-sources (binarin/optional-repo-files ".authinfo.gpg"))
   #+end_src
* TODO___ (get rid of) load all elisp files from dedicated directory
  :PROPERTIES:
  :ID:       3f54ce25-9fb5-44f8-9386-81d06e832a37
  :END:
** settings
   :PROPERTIES:
   :ID:       99e66c58-7d63-4fa1-96f8-2db46881de63
   :END:

#+begin_src emacs-lisp
  (auto-insert-mode t)
  (put 'narrow-to-region 'disabled nil)
  (setf whitespace-style '(tabs trailing tab-mark face lines-tail))
  (winner-mode t)
  (require 'windmove)
#+end_src


** keys
   :PROPERTIES:
   :ID:       717b7450-5e01-4335-be69-a25d3a39006c
   :END:
#+begin_src emacs-lisp
  (global-set-key (read-kbd-macro "M-<down>") 'next-error)
  (global-set-key (read-kbd-macro "M-<up>")   'previous-error)

  (global-set-key (read-kbd-macro "C-x C-x")
                  (lambda ()
                    (interactive)
                    (exchange-point-and-mark t)))
#+end_src

* Appearance
  :PROPERTIES:
  :ID:       04613ff3-708d-490a-af97-890686cdde5b
  :END:
** TODO___ smart-mode-line (move rm-blacklist to corresponding place)
   :PROPERTIES:
   :ID:       cbae4d1d-db7d-4e9e-8cfe-1f68b2e0ba87
   :END:

   +begin_src emacs-lisp
     (use-package rich-minority
       :ensure t)

     (use-package smart-mode-line-powerline-theme
       :ensure t)

     (use-package smart-mode-line
       :ensure t
       :init
       (require 'rich-minority)
       (setf sml/theme 'powerline)
       (setf rm-blacklist '(" hl-p" " Smrt" " Paredit" " Helm" " SliNav" " yas" " MRev" " ARev" " ElDoc" " Undo-Tree" " ^_^" " FS"))
       (sml/setup))
   +end_src

* Behaviour
  :PROPERTIES:
  :ID:       600cdb84-b762-4fcd-9aac-d868472724dd
  :END:
** Hydra
   :PROPERTIES:
   :ID:       6b54debb-92e2-42f5-befb-eed32b8090e4
   :END:
+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
+end_src

** dired
   :PROPERTIES:
   :ID:       0efd7e49-0d84-43cd-8332-bcc835dc2f72
   :END:

  (setf dired-bind-jump nil)

** smart-tab
   :PROPERTIES:
   :ID:       b60f40ed-1196-4bbe-96ab-eb7ae09d99bf
   :END:
+begin_src emacs-lisp
  (req-package smart-tab
    :commands smart-tab-mode
    :init (progn
            (add-hook 'example-mode-hook 'smart-tab-mode)))
+end_src
+end_src
** ace-jump
   :PROPERTIES:
   :ID:       6e15850e-8e2e-45d7-ad0a-f0c83bbf4430
   :END:

+begin_src emacs-lisp
  (req-package-force ace-jump-mode
    :require key-chord
    :bind ("C-c SPC" . ace-jump-mode)
    :init
    (progn
      (autoload 'ace-jump-mode "ace-jump-mode")
      (key-chord-define-global "gc" 'ace-jump-mode)))
+end_src

** version control

   #+begin_src emacs-lisp
     (setq vc-ignore-dir-regexp
           (format "\\(%s\\)\\|\\(%s\\)"
                   vc-ignore-dir-regexp
                   tramp-file-name-regexp))
   #+end_src

* External programs
** Browser
   #+begin_src emacs-lisp
     (setf browse-url-browser-function 'browse-url-generic
   	browse-url-generic-program "xdg-open")
   #+end_src
** edit-in-chrome
   :PROPERTIES:
   :ID:       d8c5a6a6-ce60-4ccc-bda8-70755cc9d4c0
   :END:
+begin_src emacs-lisp
  (req-package edit-server
    :if window-system
    :init
    (add-hook 'after-init-hook 'edit-server-start t))
+end_src

* Communication
** IRC
   :PROPERTIES:
   :ID:       992767f0-1151-410a-81d8-80c60bf73548
   :END:

+begin_src emacs-lisp
  (setf erc-hide-list '("JOIN" "PART" "QUIT"))

  (use-package circe
    :commands circe
    :config
    (setf circe-network-options `(("Freenode"
                                   :channels ("#erlang" "#erlounge" "#openstack-oslo" "#rabbitmq"))
                                  ("Bitlbee"
                                   :port 6667
                                   :channels ("#erlang-talks")
                                   :pass ,(funcall (plist-get (nth 0 (auth-source-search :host "127.0.0.1" :port 6667 :user "binarin")) :secret)))))
    (setf circe-reduce-lurker-spam t)
    (load "lui-logging" nil t)
    (enable-lui-logging-globally))

  (defun irc ()
    (interactive)
    (circe "Freenode")
    ;; (circe "Bitlbee")
    )

+end_src

* Personal organization
** Notes about setting up org-capture

URL:
javascript:location.href='org-protocol://capture://l/'+encodeURIComponent(location.href)+'/'+encodeURIComponent(document.title)+'/'+encodeURIComponent(window.getSelection())

~/.local/share/applications/mimeapps.list
[Default Applications]
x-scheme-handler/org-protocol=org-protocol.desktop

~/.local/share/applications/org-protocol.desktop
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;

** TODO___ Split org-mode massive config into manageable chunks
   :PROPERTIES:
   :ID:       fae1c7a2-acd5-4414-9131-f0b89585e9ba
   :END:

#+begin_src emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Keybindings
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (define-key global-map "\C-cb" 'org-iswitchb)

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Refile
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (setq org-time-stamp-rounding-minutes (quote (1 15)))

  (setq org-columns-default-format "%54ITEM(Task) %8Effort(Effort){:} %8CLOCKSUM")
  (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))

  (setq org-log-done 'time)
  (setq org-log-repeat 'time)
  (setq org-log-into-drawer t)


  (defun clockout-nagger ()
    (call-process "~/.rc/nagger.py" nil nil nil))

  (defun clockout-remove-nagger ()
    (call-process "killall" nil nil nil "nagger.py"))

  (add-hook 'org-clock-out-hook 'clockout-nagger)
  (add-hook 'org-clock-in-hook 'clockout-remove-nagger)

#+end_src
** Focusing on currently clocked-in item
   :PROPERTIES:
   :ID:       ca208a73-d192-49ee-a6d6-d088c6e661a0
   :END:

Switch to perspective (if working directory is specified).

#+begin_src emacs-lisp
  (defun binarin/maybe-change-perspective-on-clockin ()
    (awhen (org-entry-get org-clock-marker "WORKING_DIR" t)
      (let ((persp (or (org-entry-get org-clock-marker "PERSPECTIVE_NAME" t)
                       (file-name-nondirectory (directory-file-name it)))))
        (persp-switch persp)
        (persp-add-buffer (dired-noselect it)))))

  (defun binarin/set-main-perspective-on-clockout ()
    (persp-switch "main"))

  (add-hook 'org-clock-in-hook #'binarin/maybe-change-perspective-on-clockin)
  (add-hook 'org-clock-out-hook #'binarin/set-main-perspective-on-clockout)
#+end_src

Access to predefined actions from everywhere.

** Repetitive things
   :PROPERTIES:
   :ID:       f3e22cdc-f8d2-4726-b233-e6daef24622b
   :END:

#+begin_src emacs-lisp
  (autoload 'org-drill "org-drill" "" t)
  (setf org-drill-question-tag "drill")
#+end_src

** Export
   :PROPERTIES:
   :ID:       581a79ad-e824-4f37-a774-dec825e646ce
   :END:
+begin_src emacs-lisp
  (load-file "~/.rc/ob-blockdiag.el")
  (require 'ob-sh)
  (require 'ob-sql)
  (setf org-html-htmlize-output-type 'css)
  (setf org-export-babel-evaluate 'inline-only)
+end_src
** Syncing with mobile

    Automatic synchronization
    +begin_src emacs-lisp
      (defvar org-mobile-push-timer nil
        "Timer that `org-mobile-push-timer' used to reschedule itself, or nil.")

      (defun org-mobile-push-with-delay (secs)
        (when org-mobile-push-timer
          (cancel-timer org-mobile-push-timer))
        (setq org-mobile-push-timer
              (run-with-idle-timer
               (* 1 secs) nil #'(lambda ()
                                  (org-mobile-pull)
                                  (org-mobile-push)))))

      (add-hook 'after-save-hook
                (lambda ()
                  (when (eq major-mode 'org-mode)
                    (dolist (file org-mobile-files)
                      (if (string= (file-truename (expand-file-name file))
                                   (file-truename (buffer-file-name)))
                          (org-mobile-push-with-delay 30))))))

      ;; refreshes agenda file each day
      (run-at-time "00:05am" 86400 '(lambda ()
                                      (org-mobile-push-with-delay 30)))

      (require 'filenotify)
      (when (and (string= system-name "demandred.home.binarin.ru"))
        (file-notify-add-watch (file-truename
                                (concat (file-name-as-directory org-mobile-directory) "mobileorg.org"))
                               '(change)
                               #'(lambda (event)
                                   (org-mobile-push-with-delay 30))))

      ;; Do a pull every 5 minutes to circumvent problems with timestamping
      ;; (ie. dropbox bugs)
      ;; (run-with-timer 0 (* 5 60) 'org-mobile-pull)

    +end_src

* Navigation
** Bookmark+
   :PROPERTIES:
   :ID:       9778b5a2-8623-4235-bd08-9d2df82b8e5b
   :END:
+begin_src emacs-lisp
  (use-package bookmark+
    :ensure t
    :config
    (setf bookmark-default-file "~/.emacs.d/save/bookmarks"))
+end_src

** Perspective
   :PROPERTIES:
   :ID:       ed5b256e-3ecb-470f-9d63-da1a96ebb1b4
   :END:

Every file in org-agenda-files should be present in every perspective:
- When creating new perspective add already opened items from org-agenda-files
- When opening file from org-agenda files add it to every perspective

+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (persp-mode t)
    (persp-turn-off-modestring)
    (require 'perspective))

  (defun binarin/perspective-preserve-shared-buffer (orig-fun persp)
    "Preserve current buffer after perspective switch if it's a
  member of both perspectives - so there will be no random buffer
  switching. Also preserve tracking information in IM buffers (by
  forbidding pers-activate to use switch-to-buffer on them)."
    (let* ((original-switch-to-buffer (symbol-function 'switch-to-buffer))
           (current-buffer-pre-switch (current-buffer))
           (res (cl-letf (((symbol-function 'switch-to-buffer) (lambda (buffer &rest args)
                                                                 (unless (member (buffer-local-value 'major-mode buffer)
                                                                                 '(jabber-chat-mode erc-mode circe-channel-mode circe-query-mode))
                                                                   (apply original-switch-to-buffer buffer args)))))
                  (funcall orig-fun persp))))
      (when (member current-buffer-pre-switch (persp-buffers persp))
        (switch-to-buffer current-buffer-pre-switch))
      res))

  (defun binarin/add-all-perspective-buffers-to-new-perspective ()
    (dolist (buf (-filter (lambda (buf)
                            (or
                             (-contains? org-agenda-files (buffer-file-name buf))
                             (member (buffer-local-value 'major-mode buf)
                                     '(jabber-chat-mode erc-mode circe-channel-mode circe-query-mode))))
                          (buffer-list)))
      (persp-add-buffer buf)))

  (defun binarin/add-current-buffer-to-all-perspectives ()
    (when persp-mode
      (dolist (frame (frame-list))
        (loop for persp being the hash-values of (with-selected-frame frame perspectives-hash)
              do (unless (memq (current-buffer) (persp-buffers persp))
                   (push (current-buffer) (persp-buffers persp)))))))

  (add-hook 'persp-created-hook #'binarin/add-all-perspective-buffers-to-new-perspective)
  (add-hook 'org-mode-hook #'binarin/add-current-buffer-to-all-perspectives)
  (add-hook 'jabber-chat-mode-hook #'binarin/add-current-buffer-to-all-perspectives)
  (add-hook 'circe-channel-mode-hook #'binarin/add-current-buffer-to-all-perspectives)
  (add-hook 'circe-query-mode-hook #'binarin/add-current-buffer-to-all-perspectives)
  (advice-add 'persp-activate :around #'binarin/perspective-preserve-shared-buffer)


+end_src

** Projectile
   :PROPERTIES:
   :ID:       abc009dd-e41d-4b6b-bc08-adb768d44de6
   :END:

  (req-package persp-projectile
    :require (perspective projectile)
    :init (require 'persp-projectile))

#+begin_src emacs-lisp
  ;; (defun binarin/projectile-root-erlang-mk-with-deps (dir &optional list)
  ;;   (projectile-locate-dominating-file
  ;;    dir
  ;;    (lambda (dir)
  ;;      (and
  ;;       (not (s-contains? "/deps/" dir))
  ;;       (projectile-file-exists-p (expand-file-name "erlang.mk" dir))))))

#+end_src

** expand-region
   :PROPERTIES:
   :ID:       57adccce-467c-42b8-b51c-89cbe45c6fdc
   :END:
+begin_src emacs-lisp
  (req-package expand-region
    :bind ("C-=" . er/expand-region))
+end_src
** hide-show
   :PROPERTIES:
   :ID:       476e0469-82dd-425d-a634-379739651f44
   :END:

+begin_src emacs-lisp
  (use-package hideshow
    :ensure t
    :commands hs-minor-mode hs-hide-level
    :config
    (defface my/hs-overlay-face
      '((t . (:background "red")))
      "Face used for hideshow overlays"
      :group 'emacs)
    (defun my/hs-set-overlay-face (ov)
      (when (eq 'code (overlay-get ov 'hs))
        (let ((keymap (make-keymap)))
          (define-key keymap (read-kbd-macro "<return>") (lambda () (interactive) (delete-overlay ov)))
          (define-key keymap (read-kbd-macro "q") (lambda () (interactive) (delete-overlay ov)))
          (overlay-put ov 'keymap keymap)
          (overlay-put ov 'display
                       (format "... / %d"
                               (count-lines (overlay-start ov)
                                            (overlay-end ov))))
          (overlay-put ov 'face '(:background "red")))))
    (setf hs-set-up-overlay 'my/hs-set-overlay-face))

+end_src

** multiple-cursors
   :PROPERTIES:
   :ID:       c1e09432-9c16-4673-b358-bb700707adf7
   :END:
+begin_src emacs-lisp
  (req-package multiple-cursors)
+end_src
* Programming
** C
   +begin_src emacs-lisp
     (defun binarin/c-mode-hook ()
       (local-set-key (read-kbd-macro "M-.") 'helm-etags-select))

     (add-hook 'c-mode-hook 'binarin/c-mode-hook)
   +end_src
** compilation
   #+begin_src emacs-lisp
     (defun binarin/projectile-recompile (query-command?)
       (interactive "P")
       (let ((projectile-project-compilation-cmd "make case C=blocking_node_completely_disables_resolving S=test/cli_SUITE"))
         (projectile-compile-project "make case C=blocking_node_completely_disables_resolving S=test/cli_SUITE")))
     (global-set-key [f9] #'binarin/projectile-recompile)
   #+end_src
** Corral - wrap text in delimiters (instead of paredit for non-lisp)

+begin_src emacs-lisp
  (use-package corral
    :ensure t
    :commands (corral-parentheses-backward
               corral-parentheses-forward
               corral-brackets-backward
               corral-brackets-forward
               corral-braces-backward
               corral-braces-forward
               corral-double-quotes-backward)
    :init
    (add-hook 'cperl-mode-hook #'binarin/setup-corral-bindings))

  (defun binarin/setup-corral-bindings ()
    (local-set-key (kbd "M-9") 'corral-parentheses-backward)
    (local-set-key (kbd "M-0") 'corral-parentheses-forward)
    (local-set-key (kbd "M-[") 'corral-brackets-backward)
    (local-set-key (kbd "M-]") 'corral-brackets-forward)
    (local-set-key (kbd "M-{") 'corral-braces-backward)
    (local-set-key (kbd "M-}") 'corral-braces-forward)
    (local-set-key (kbd "M-\"") 'corral-double-quotes-backward))

+end_src

** electric-operator
   +begin_src emacs-lisp
     (use-package electric-operator
       :ensure t
       :commands electric-operator electric-operator-add-rules-for-mode
       :config
       (add-hook 'erlang-mode-hook #'electric-operator-mode)
       :init
       (electric-operator-add-rules-for-mode
        'erlang-mode
        (cons "++" " ++ ")
        (cons "+" " + ")
        (cons "," ", ")))
   +end_src


** Erlang
   :PROPERTIES:
   :ID:       f947b108-a5c9-4806-85fc-90592ca8f19a
   :END:

#+begin_src emacs-lisp
  ;; (defun binarin/erlang-mode-hook ()
  ;;   (local-set-key (kbd "M-*") #'edts-find-source-unwind))

  (use-package erlang
    :ensure t
    :mode ("\\.erl\\'" . erlang-mode)
    :config
    (add-hook 'erlang-mode-hook #'binarin/make-buffer-whitespace-aware)
    ;;(add-hook 'erlang-mode-hook #'binarin/erlang-mode-hook)
    )

  ;; (use-package auto-complete :ensure t)
  ;; (use-package eproject :ensure t)
  ;; (use-package popup :ensure t)
  ;; (use-package auto-highlight-symbol :ensure t)

  ;; (when (f-dir? "~/personal-workspace/edts")
  ;;   (add-to-list 'load-path "~/personal-workspace/edts")
  ;;   (require 'edts-start))

#+end_src



** Evil nerd commenter
   :PROPERTIES:
   :ID:       0bcd9cd1-1e8c-43f4-84e4-15255b2c0f36
   :END:
+begin_src emacs-lisp
  (req-package evil-nerd-commenter
    :defer 20
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))
+end_src
** Haskell
   :PROPERTIES:
   :ID:       63a80fe6-b71b-4612-a6af-6f886797b0ea
   :END:

   #+begin_src emacs-lisp
     (use-package intero
       :ensure t
       :commands intero-mode
       :init
       (add-hook 'haskell-mode-hook 'binarin/make-buffer-whitespace-aware)
       (add-hook 'haskell-mode-hook 'subword-mode)
       (add-hook 'haskell-mode-hook 'intero-mode))
   #+end_src

cabal install -j4 yeganesh hoogle hindent hlint ghc-mod hdevtools haskell-docs xmonad xmonad-contrib

hoogle data
git clone https://github.com/chrisdone/ghci-ng.git
cabal install ghci-ng/

+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :config
    (setf haskell-process-path-ghci "ghci-ng"
          haskell-process-type 'cabal-repl
          haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--with-ghc=ghci-ng"))
    (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook #'haskell-simple-indent-mode)
    (add-hook 'haskell-mode-hook #'binarin/make-buffer-whitespace-aware))

  (use-package hindent
    :ensure t
    :commands hindent-mode
    :init
    (add-hook 'haskell-mode-hook #'hindent-mode))

  (use-package shm
    :ensure t
    :commands (structured-haskell-mode structured-haskell-repl-mode)
    :init
    (add-hook 'haskell-mode-hook 'structured-haskell-mode)
    (add-hook 'haskell-interactive-mode-hook 'structured-haskell-repl-mode))
+end_src

** JavaScript
   :PROPERTIES:
   :ID:       a457dc36-0b85-404d-9652-245c48acd9d2
   :END:
   +begin_src emacs-lisp
     (use-package js2-mode
       :ensure t
       :mode "\\.\\(js\\|bemtree\\|bemhtml\\)\\'"
       :config
       (add-hook 'js2-mode-hook #'binarin/make-buffer-whitespace-aware))
   +end_src

** Magit
   :PROPERTIES:
   :ID:       5992e86f-6a93-494d-b413-fdaf1ad4e5fe
   :END:

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("<f12>" . magit-status)
    :init
    (setf magit-last-seen-setup-instructions "1.4.0")
    :config
    (setf magit-revert-item-confirm t)
    (setf magit-diff-refine-hunk t))

#+end_src

** Nix
   #+begin_src emacs-lisp
     (use-package nix-mode
       :ensure t)
   #+end_src
** Perl
   :PROPERTIES:
   :ID:       07f0b3e1-2ac5-4b9e-a4da-d03170dec349
   :END:
    +begin_src emacs-lisp
      (fset 'perl-mode 'cperl-mode)

      (setq cperl-auto-newline t)
      (setq cperl-hairy t)

      (setq cperl-brace-offset                         0   )
      (setq cperl-close-paren-offset                   -4  )
      (setq cperl-continued-brace-offset               0   )
      (setq cperl-continued-statement-offset           4   )
      (setq cperl-extra-newline-before-brace           nil )
      (setq cperl-extra-newline-before-brace-multiline nil )
      (setq cperl-indent-level                         4   )
      (setq cperl-indent-parens-as-block               t   )
      (setq cperl-label-offset                         -4  )
      (setq cperl-merge-trailing-else                  nil )
      (setq cperl-tab-always-indent                    t   )


      (setf auto-mode-alist (cons '("\\.t$" . perl-mode) auto-mode-alist))

      (define-auto-insert (cons "\\.pm" "Minimal .pm file")
        '(nil "# -*- encoding: utf-8; tab-width: 8 -*-\npackage " _ ";\nuse strict;\nuse warnings;\nuse utf8;\nuse Carp;\nuse English '-no_match_vars';\n\nuse version; our $VERSION = qv('1.0.0');\n\n1;\n"))

      (define-auto-insert (cons "\\.pl" "Minimal perl script")
        '(nil "#!/usr/bin/perl\n# -*- encoding: utf-8; tab-width: 8 -*-\nuse strict;\nuse warnings;\nuse utf8;\nuse Carp;\nuse English '-no_match_vars';\n\nuse version; our $VERSION = qv('1.0.0');\n\n" _ "\n"))

      (define-auto-insert (cons "\\.t$" "Test::Class based test")
        '(nil "#!/usr/bin/env perl
      use my_inc \"../..\";
      use Direct::Modern;

      use base qw/Test::Class/;
      use Test::More;

      use Data::Dumper;

      sub load_modules: Tests(startup => 1) {
          use_ok '" _ "';
      }

      __PACKAGE__->runtests();
      "))

      (defun my-cperl-mode-hook ()
        (hs-minor-mode t)
        (yas-minor-mode t)
        (setf prettify-symbols-alist '(("->" . ?→)
                                       (">=" . ?≥)
                                       ("<=" . ?≤)))
        ;; ("<>" . ?≠)  ("=>" . ?⇒)
        (prettify-symbols-mode t)
        (local-set-key (read-kbd-macro "C-c C-c") 'hs-toggle-hiding)
        (local-set-key (read-kbd-macro "M-.") 'helm-etags-select)
        (setf tags-file-name (expand-file-name "TAGS" (projectile-project-root))
              tags-table-list nil))

      (add-hook 'cperl-mode-hook 'my-cperl-mode-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode)

      (defun my/hs-hide-at-function-level (arg)
        "With hs-special-modes-alist for cperl-mode set later, this
      will hide first level of braces inside of current function body."
        (interactive "p")
        (save-excursion
          (beginning-of-defun)
          (hs-hide-level arg)))

      (defun hs-hide-block-at-point-bol-advice (orig-fun &rest args)
        "Our hs-special-modes-alist entry for cperl-mode will match
      only at beginning of line, but hs-hide-block-at-point expects
      otherwise. So while in cperl-mode we are providing little help to
      it."
        (save-excursion
          (when (eq major-mode 'cperl-mode) (move-beginning-of-line 1))
          (apply orig-fun args)))

      (with-eval-after-load 'hideshow
        ;; hide/show only first and second level constructs (functions and first level of braces inside)
        ;; So doing toggle at any place inside this constructs will toggle only first and second level braces,
        ;; not nearest pair enclosing point.
        (add-to-list 'hs-special-modes-alist '(cperl-mode ("^\\(?:    \\)?\\(?:\\S-.*\\|\\)\\({\\)\\s-*$" 1) "}" "/[*/]" nil nil))
        (add-function :around (symbol-function 'hs-hide-block-at-point) 'hs-hide-block-at-point-bol-advice)
        (define-key hs-minor-mode-map (read-kbd-macro "C-c @ C-l") 'my/hs-hide-at-function-level))

   +end_src

** puppet
   :PROPERTIES:
   :ID:       365c590f-726a-427a-9f30-6036d0b3c296
   :END:
+begin_src emacs-lisp
  (req-package puppet-mode
    :mode "\\.pp\\'"
    :config )

  (add-hook 'puppet-mode-hook #'binarin/make-buffer-whitespace-aware)

  (defun puppet-class-name ()
    (let* ((path (reverse (split-string (buffer-file-name) "/")))
           (filename (file-name-base (buffer-file-name))))
      (cond
       ((and (string= "profile" (second path))
             (string= "manifests" (third path)))
        (message "%s" (concat (fourth path) "::profile::" filename))))))

  (defun puppet-auto-insert ()
    (let ((class (puppet-class-name)))
      (when class
        (insert "class " class " {\n\n}\n"))))

  (define-auto-insert 'puppet-mode 'puppet-auto-insert)

+end_src
** python
   +begin_src emacs-lisp
     (defun binarin/python-mode-hook ()
       (local-set-key (kbd "M-.") 'helm-etags-select))

     (add-hook 'python-mode-hook 'binarin/python-mode-hook)
   +end_src
** shell
   #+begin_src emacs-lisp
     (add-hook 'sh-mode-hook #'binarin/make-buffer-whitespace-aware)
   #+end_src
** vimish-fold
   +begin_src emacs-lisp
     (use-package vimish-fold
       :ensure t
       :bind (("C-`" . vimish-fold))
       :init
       (vimish-fold-global-mode 1)
       (define-key vimish-fold-folded-keymap (kbd "C-#") #'vimish-fold-unfold)
       (define-key vimish-fold-unfolded-keymap (kbd "C-#") #'vimish-fold-refold))
   +end_src

** Web mode
   +begin_src emacs-lisp
     (use-package web-mode
         :ensure t
         :commands web-mode)
   +end_src


** YAML
   :PROPERTIES:
   :ID:       4cd5af96-6577-456c-8914-1390612ad773
   :END:
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yaml\\'")
#+end_src

** zeal
   :PROPERTIES:
   :ID:       e4faf6e4-7e4a-43d8-91bb-f6dd54fda363
   :END:
+begin_src emacs-lisp
  (req-package zeal-at-point
    :bind ("C-c d" . zeal-at-point))
+end_src
* Productivity
** jammer is a tool for punishing yourself for inefficiently using Emacs.
   :PROPERTIES:
   :ID:       721749e7-0e27-4ed5-ad8a-9f2f73e0714b
   :END:

#+begin_src emacs-lisp
  (use-package jammer
    :ensure t
    :config
    (jammer-mode t)
    (setf jammer-block-type 'whitelist
          jammer-block-list '(self-insert-command)
          jammer-repeat-type 'linear))
#+end_src

** Markdown
   :PROPERTIES:
   :ID:       28e750f6-2ae6-4c4a-9a41-5d19359dbce9
   :END:
+begin_src emacs-lisp
  (req-package markdown-mode
    :mode "\\.md\\'")
+end_src

* Things to try/to do
** [[https://github.com/alphapapa/helm-org-rifle][alphapapa/helm-org-rifle: Rifle through your Org buffers and acquire your target]]
   :PROPERTIES:
   :ID:       7a598815-9d9c-4ae0-af9a-fbf58a7067cf
   :END:
   [2016-04-13 Ср 13:00]


** [[https://github.com/bbatsov/crux/blob/master/crux.el][GitHub · Where software is built]]
   :PROPERTIES:
   :ID:       1a6641f0-ec33-43f9-aed4-32844b49be77
   :END:
 [2015-12-30 ср 18:49]



** [[https://github.com/bbatsov/super-save][bbatsov/super-save]]
   :PROPERTIES:
   :ID:       c6f3cd1f-a5b7-43b0-980d-9cf12cc20dfb
   :END:
 [2015-12-27 вс 12:37]



** [[https://www.reddit.com/r/emacs/comments/36cq0k/corral_a_fast_intuitive_way_to_wrap_parentheses/][Corral - a fast, intuitive way to wrap parentheses and other delimiters around text]]
   :PROPERTIES:
   :ID:       90a5e876-1a4f-47dd-9acd-6b1e87e559f9
   :END:
   :LOGBOOK:
   - State "DONE___"    from "STARTED"    [2015-05-20 Ср 19:01]
   :END:
   :CLOCK:
   CLOCK: [2015-05-20 Ср 18:53]--[2015-05-20 Ср 19:01] =>  0:08
   :END:
** [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Deciphering Glyph :: Your Text Editor Is Malware]]
 [2015-11-13 пт 11:10]
** [[https://www.reddit.com/r/programming/comments/3sed38/parinfer_simpler_lisp_editing/][Parinfer - simpler Lisp editing]]
   :PROPERTIES:
   :ID:       d2c4cca7-8973-45a5-9af3-aad6dae25185
   :END:
 [2015-11-12 чт 07:35]
** [[https://github.com/Malabarba/beacon][Malabarba/beacon]]
   :PROPERTIES:
   :ID:       c0ca77b7-65d2-4948-97e0-e83db65f2092
   :END:

** [[https://github.com/thierryvolpiatto/zop-to-char/][Thierry Volpiatto's wonderful zop-to-char, a better, visual replacement of zap-to-char]]
  :PROPERTIES:
  :ID:       4af1a65d-1d7f-4356-915d-d04b9bdc08e7
  :END:
[2015-02-07 сб 14:01]
** [[https://github.com/bburns/clipmon][Emacs as a clipboard manager with Clipmon]]
  :PROPERTIES:
  :ID:       4065a90d-624c-4eef-8759-d21c627f1631
  :END:
[2015-02-05 чт 09:32]


** [[https://www.reddit.com/r/emacs/comments/2up0h3/hydra_for_normal_state_in_helm/][Hydra for "Normal" State in Helm]]
  :PROPERTIES:
  :ID:       c3f6fde1-d263-4b5c-91b2-3a64b9b8a420
  :END:
[2015-02-04 ср 08:16]


** [[http://oremacs.com/2015/01/20/introducing-hydra/][Behold The Mighty Hydra! · (or emacs]]
  :PROPERTIES:
  :ID:       abff0037-77b4-4fee-a78b-184c9c02124e
  :END:
[2015-01-21 ср 00:18]
** [[https://github.com/boyw165/history][History.el - History Utility For Code Navigation (similar to pop-global-mark but more powerful)]]
  :PROPERTIES:
  :ID:       f4a0d202-aaf2-451c-ab7f-022a00bf235d
  :END:
[2015-01-16 пт 15:14]



** [[https://github.com/josteink/wsd-mode][Create sequence-diagrams on all platforms using Emacs and the new wsd-mode package]]
  :PROPERTIES:
  :ID:       0cb5dc3c-3135-4e07-9751-7e123515e4bb
  :END:
[2014-12-15 пн 20:35]


** [[http://definitelyaplug.b0.cx/post/dlist-a-major-mode-tutorial-5/][dlist: A Major Mode Tutorial | Definitely a plug.]]
  :PROPERTIES:
  :ID:       1adeead4-27ff-486b-a2ad-c2e0dac287ae
  :END:
[2014-12-14 вс 18:34]


** [[http://blog.binchen.org/posts/advanced-tip-on-using-mozrepl-to-automatically-refresh-browser.html][Advanced tip on using mozrepl to automatically refresh browser]]
  :PROPERTIES:
  :ID:       32cec936-f428-4686-9948-41710bfaaa7d
  :END:
[2014-12-03 ср 23:30]
** [[https://github.com/zk-phi/phi-grep][yet another recursive editable grep implementation in Elisp (beta)]]
  :PROPERTIES:
  :ID:       6d86b0c2-3468-4573-910f-921b3b66963e
  :END:
[2014-12-03 ср 23:30]




** [[http://www.emacswiki.org/emacs/wgrep.el][EmacsWiki: wgrep.el]]
  :PROPERTIES:
  :ID:       0f959938-51e1-4c7d-b39c-f758ec086cf1
  :END:
[2014-12-03 ср 10:13]


** [[http://www.masteringemacs.org/article/diacritics-in-emacs][Olé! Diacritics in Emacs - Mastering Emacs]]
  :PROPERTIES:
  :ID:       56f3dd12-2ea1-48e3-bff4-0fab5a9a5dc1
  :END:
[2014-12-02 вт 00:03]


** [[https://github.com/syl20bnr/spacemacs][GitHub · Build software better, together.]]
  :PROPERTIES:
  :ID:       95c866bd-8fba-4c84-90ca-fe5a4df82c71
  :END:
[2014-12-01 пн 23:58]
** [[https://github.com/wasamasa/shackle][Enforce rules for popup windows]]
  :PROPERTIES:
  :ID:       4a421de9-61a9-49cb-817f-4315e8870d8b
  :END:
[2014-12-01 пн 20:34]


** [[https://www.reddit.com/r/emacs/comments/2nwins/camcorderel_capture_screencasts_directly_from/][camcorder.el - capture screencasts directly from Emacs.]]
  :PROPERTIES:
  :ID:       18181d3a-4d9b-4c2b-a71e-f5fd6b57097c
  :END:
[2014-12-01 пн 10:20]


** [[https://github.com/capitaomorte/sly][SLY, i.e. "Slime without the Helmut." Impressions?]]
  :PROPERTIES:
  :ID:       9c55a0c0-d7d8-4855-b464-b8c4a07b3ebb
  :END:
[2014-11-29 сб 10:06]


** [[http://workgroups2.readthedocs.org/en/latest/][Workgroups2 - Emacs session manager — Workgroups2 1.2 documentation]]
  :PROPERTIES:
  :ID:       1882ffe0-17a2-410e-a6fc-7519f17bc8a9
  :END:
[2014-11-27 чт 09:56]
** [[http://www.reddit.com/r/emacs/comments/2n9tj8/anyone_care_to_share_their_magit_workflow/][Anyone care to share their magit workflow?]]
  :PROPERTIES:
  :ID:       a30d66b2-4658-4487-b4dd-8a6d7b8d23ff
  :END:
[2014-11-27 чт 09:54]
** [[http://www.reddit.com/r/emacs/comments/2n73lk/eschewing_zshell_for_emacs/][Eschewing Zshell for Emacs]]
  :PROPERTIES:
  :ID:       57933c78-a472-41f4-8cfc-66d496724b51
  :END:
[2014-11-27 чт 09:54]
** [[http://www.reddit.com/r/emacs/comments/2n5qsg/edit_lisp_structurally_with_emacs_package_lispy/][Edit LISP structurally with Emacs package lispy]]
  :PROPERTIES:
  :ID:       b2132412-8603-4eff-8fe8-1a68a8822339
  :END:
[2014-11-27 чт 09:54]
** [[http://endlessparentheses.com/debugging-example-part-1-earn-your-independence.html?source%3Drss][Debugging Example Part 1: Earn your independence]]
   :PROPERTIES:
   :ID:       7ac3e963-372d-4ba6-bf85-8a1d1d28acb5
   :END:
  [2014-11-25 вт 23:44]


** [[http://www.emacswiki.org/emacs/nameses][EmacsWiki: nameses]]
  :PROPERTIES:
  :ID:       b264daac-24b6-40a0-aa79-a3b1f9cd0824
  :END:
[2014-11-23 вс 14:09]


** [[https://github.com/Bruce-Connor/aggressive-indent-mode][Bruce-Connor/aggressive-indent-mode · GitHub]]
  :PROPERTIES:
  :ID:       7556178c-9d37-4dd9-8a2b-54063f100636
  :END:
[2014-11-20 чт 18:59]
** eww in mu4e - don't open links on RET
   :PROPERTIES:
   :ID: 66b4186d-ff25-4441-99db-bd54c12d0bbf
   :END:
   [2014-11-21 Пт]

** restclient mode
** [[https://github.com/promethial/paxedit][Paxedit - Structured, Context Driven LISP Editing and Refactoring]]
  :PROPERTIES:
  :ID:       754364d8-55bc-47f5-be21-6f418fa2f5b0
  :END:
[2014-11-17 пн 09:38]


** russian programmer dvorak to elpa
   :PROPERTIES:
   :ID: 43c7b0a7-18cd-430a-8861-3ac69b2533e4
   :END:
   [2014-11-16 Вс]
   [[file:~/.emacs.d/emacs-config.org::*Emacs%20Lisp][Emacs Lisp]]
** http://www.reddit.com/r/emacs/comments/209s2y/my_new_emacsd_with_org_mode_and_reqpackage/
   :PROPERTIES:
   :ID: 3c571a9a-7657-4c3b-9e1e-c6be7b35a807
   :END:
   [2014-11-17 Пн]
   [[file:/ssh:ppcdev1:/var/www/beta.binarin-DIRECT-35858-vcards-improvements-for-api5.8159/protected/VCards.pm::package%20VCards%3B][file:/ssh:ppcdev1:/var/www/beta.binarin-DIRECT-35858-vcards-improvements-for-api5.8159/protected/VCards.pm::package VCards;]]
** org-mode link items by id
   :PROPERTIES:
   :ID: 5f11364e-6129-4b50-8f19-48be6785b356
   :END:
   [2014-11-17 Пн]
   [[file:~/org/yandex.org::*%5B%5B/ssh:ppcdev1:/var/www/beta.binarin-DIRECT-35858-vcards-improvements-for-api5.8159%5D%5Bwd%5D%5D%20%5B%5Bhttps://8159.beta1.direct.yandex.ru/registered/main.pl?cmd%253DshowSearchPage%5D%5Bbeta%5D%5D%20%5B%5Bhttps://st.yandex-team.ru/DIRECT-35858%5D%5BDIRECT-35858%20%D0%9C%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B2%D0%B8%D0%B7%D0%B8%D1%82%D0%BE%D0%BA%20%D0%B4%D0%BB%D1%8F%20API5%5D%5D][wd wd wd]]
** [[https://github.com/gregsexton/origami.el][Origami -- a new text folding minor mode]]
  :PROPERTIES:
  :ID:       68b68d69-ad62-405f-bb33-0abb3c2b0c9a
  :END:
[2014-11-16 вс 10:24]
** mu4e and jabber should also be shared by all perspectives
   :PROPERTIES:
   :ID: f0fbdccd-e5de-4875-9013-3e98037f7dc2
   :END:
   [2014-11-17 Пн]

** prelude-rename-file-and-buffer
   :PROPERTIES:
   :ID: 9ec192b3-1008-4d0c-b437-0d6285771e57
   :END:
   [2014-11-17 Пн]
   [[file:/ssh:ppcdev1:/var/www/beta.binarin-DIRECT-35858-vcards-improvements-for-api5.8159/bin/apache_reloader.pl]]
** how to rename files in dired
   :PROPERTIES:
   :ID: 484ad75b-77d0-416c-ae78-2a5f9d63af5a
   :END:
   [2014-11-17 Пн]
   [[file:/ssh:ppcdev1:/var/www/beta.binarin-DIRECT-35858-vcards-improvements-for-api5.8159/bin/apache_reloader.pl]]
** https://github.com/djcb/sauron
** pcre2el
** quantified awesome at sacha chua
** eldoc
** org-expiry
** bbdb or org-contacts
** [[https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el][xah-toggle-margin-right and xah-toggle-read-novel-mode]]
** recursive-narrow  http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html
** Predefine registers for my org-mode agenda files
** authinfo.gpg
** ielm
** smart-mode-line
** nyan-mode
** which-function-mode
** undo-tree
** smerge-mode
** bookmark+ - This allows prettier visual bookmarks and bookmarking functions. I've got org-agenda, mu4e and magit-status bookmarked.
** guide-key
** diminish
** https://github.com/nschum/highlight-symbol.el
** rainbow-mode
** https://github.com/benma/visual-regexp-steroids.el/
** https://github.com/magnars/multiple-cursors.el
** https://github.com/monochromegane/the_platinum_searcher
** https://github.com/Wilfred/ag.el
** https://github.com/edvorg/req-package
** https://github.com/magnars/s.el
** https://github.com/Wilfred/ht.el
** https://github.com/rejeep/f.el
** https://github.com/jwiegley/emacs-async
** https://github.com/ShingoFukuyama/ov.el
* COMMENT Discarded experiments
** god-mode
   :PROPERTIES:
   :ID:       8eb27e9e-2a3e-4dc7-9a5a-a029ae392573
   :END:
#+begin_src emacs-lisp
  (use-package god-mode
    :ensure t
    :bind ("<escape>" . god-local-mode)
    :init
    (god-mode)
    (require 'god-mode-isearch)
    (define-key isearch-mode-map (kbd "<escape>") 'god-mode-isearch-activate)
    (define-key god-mode-isearch-map (kbd "<escape>") 'god-mode-isearch-disable)
    (global-set-key (kbd "C-x C-1") 'delete-other-windows)
    (global-set-key (kbd "C-x C-2") 'split-window-below)
    (global-set-key (kbd "C-x C-3") 'split-window-right)
    (define-key god-local-mode-map (kbd ".") 'repeat)
    (define-key god-local-mode-map (kbd "i") 'god-local-mode)
    (add-to-list 'god-exempt-major-modes 'eshell-mode))

     (defun binarin/update-god-mode-cursor ()
       (setq cursor-type (if (or god-local-mode buffer-read-only)
                             'bar
                           'box)))

     (defvar binarin/red-tint-cookie nil)
     (make-variable-buffer-local 'binarin/red-tint-cookie)

     (defun binarin/tint-buffer-red ()
       (unless binarin/red-tint-cookie
         (setf binarin/red-tint-cookie
               (face-remap-add-relative 'default :background "#473F3F"))))

     (defun binarin/tint-buffer-default ()
       (awhen binarin/red-tint-cookie
         (face-remap-remove-relative it)
         (setf binarin/red-tint-cookie nil)))

     (add-hook 'god-mode-enabled-hook #'binarin/tint-buffer-red)
     (add-hook 'god-mode-disabled-hook #'binarin/tint-buffer-default)
#+end_src

* Reference information
** [[http://tuhdo.github.io/helm-projectile.html#sec-7][Exploring large projects with Projectile and Helm Projectile]] :COMP:
   :PROPERTIES:
   :ID:       6d9eb8e7-8b4c-4271-b7b7-0d350edce565
   :END:
   :LOGBOOK:
   - State "DONE___"    from "STARTED"    [2015-04-22 Ср 16:06]
   :END:
   :CLOCK:
   CLOCK: [2015-04-22 Ср 14:13]--[2015-04-22 Ср 14:25] =>  0:12
   :END:
[2014-11-11 вт 19:18]

