#+TITLE: binarin's emacs configuration
#+OPTIONS: toc:4 h:4
* File header
  :PROPERTIES:
  :ID:       872629ce-4d48-47d4-b276-f7935cd31243
  :END:
** Enable lexical bindings
  #+begin_src emacs-lisp
    ;; -*- lexical-binding: t -*-
  #+end_src

** Load helper modules
  #+begin_src emacs-lisp
    (package-initialize)

    (require 'cl-lib)
    (require 'f)
    (require 's)
    (require 'dash)
    (require 'anaphora)
    (require 'general)

    ;; general-setq will also call triggers on customizable setttings,
    ;; allowing them to be properly changed even after corresponding
    ;; package was loaded
    (fset 'gsetq 'general-setq)
  #+end_src

** Use separate lisp file for customizations made through UI
   Load it early, so any lisp customizations can override customized values.
  #+begin_src emacs-lisp
    (gsetq custom-file (concat (file-name-directory binarin/primary-emacs-config) "custom.el"))
    (load-file custom-file)
  #+end_src

* Startup
** Hide startup screen

   #+begin_src emacs-lisp
       (setq inhibit-startup-screen t)
   #+end_src

** Delay keybindings

   I want my keybindings to be applied late in the initialization
   process, after all keymaps are already created and packages are
   loaded.

   #+BEGIN_SRC emacs-lisp
     (defvar binarin/keybindings nil)
     (defvar binarin/keybindings-applied nil)

     (defun binarin/define-key (&rest args)
       (when binarin/keybindings-applied
	 (apply #'general-define-key args))
       (add-to-list 'binarin/keybindings args))

     (defun binarin/apply-queued-keybindings ()
       (setf binarin/keybindings-applied t)
       (-each binarin/keybindings #'(lambda (args) (apply #'general-define-key args))))
   #+END_SRC

* Appearance
** Fonts
   :PROPERTIES:
   :ID:       26d38fee-8252-4024-b0e8-1466ff4052c9
   :END:

  #+begin_src emacs-lisp
    (setq default-frame-alist '((font . "Iosevka-22")))
    (defconst binarin/minimal-screen-width 124
      "Iosevka-22 on 1920x1080 screen")
  #+end_src

** Theme
   #+begin_src emacs-lisp
     (require 'zenburn-theme)
   #+end_src
** Set window title
   Full name in window title, will be shown in taskbar.

   #+begin_src emacs-lisp
       (setq frame-title-format
             '((:eval (if (buffer-file-name)
                          (abbreviate-file-name (buffer-file-name))
                        "%b"))
               " - "
               invocation-name))
   #+end_src

** Remove visual clutter
   :PROPERTIES:
   :ID:       8ee1f692-db6b-4fac-bb48-edb5910c779b
   :END:

   #+begin_src emacs-lisp
     (awhen (window-system)
       (toggle-scroll-bar -1)
       (tool-bar-mode -1))
   #+end_src

** Tool-tips
   #+BEGIN_SRC emacs-lisp
     (gsetq x-gtk-use-system-tooltips nil)
   #+END_SRC
* Behavior
** Helm
   :PROPERTIES:
   :ID:       8a6ae7ca-1e23-4820-b260-4ece0d844335
   :END:

   #+begin_src emacs-lisp
     (require 'helm-mode)
     (global-unset-key (kbd "C-x c"))

     ;; (require 'helm-org)
     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
     (define-key helm-map (kbd "M-x")  'helm-select-action) ; list actions using C-z

     (when (executable-find "curl")
       (setq helm-google-suggest-use-curl-p t))

     (setq helm-quick-update                     t ; do not display invisible candidates
	   helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	   helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
	   helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	   helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	   helm-ff-file-name-history-use-recentf t)

     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key [f3] 'helm-find-files)

     (helm-mode 1)
   #+end_src

** Ivy
   #+BEGIN_SRC emacs-lisp
     (require 'ivy)

     (binarin/define-key "C-'" 'swiper)

     (binarin/define-key
      :keymaps 'ivy-mode-map
      "C-'" 'ivy-avy)

     (ivy-mode 1)

     ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
     (gsetq ivy-use-virtual-buffers t)
     (gsetq ivy-virtual-abbreviate 'full)

     ;; number of result lines to display
     (gsetq ivy-height 10)

     ;; does not count candidates
     (gsetq ivy-count-format "")

     ;; no regexp by default
     (gsetq ivy-initial-inputs-alist nil)

     ;; configure regexp engine.
     (gsetq ivy-re-builders-alist
	    ;; allow input not in order
	    '((t   . ivy--regex-ignore-order)))
   #+END_SRC
** History
    :PROPERTIES:
    :ID:       9dea8cec-794d-4757-84de-2c166ce10567
    :END:
    #+begin_src emacs-lisp
      (gsetq savehist-additional-variables '(search-ring kill-ring regexp-search-ring)
	     savehist-autosave-interval 60 ;; from default 300
	     history-length t
	     history-delete-duplicates t)
      (savehist-mode t)
    #+end_src

    #+begin_src emacs-lisp
      (gsetq recentf-max-saved-items 2000
	     kill-ring-max 5000
	     undo-limit (* 20 1024 1024)
	     undo-strong-limit (* 40 1024 1024)
	     undo-outer-limit (* 100 1024 1024)
	     mark-ring-max 5000
	     global-mark-ring-max 5000)
    #+end_src

    #+begin_src emacs-lisp
      (save-place-mode t)
    #+end_src

** Dired
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'dired-hide-details-mode)
     (binarin/define-key "C-x C-j" 'dired-jump)
   #+END_SRC
** Truncate lines by default
   #+begin_src emacs-lisp
     (gsetq truncate-lines t)
   #+end_src

** Paredit
   :PROPERTIES:
   :ID:       13fbc9ee-bd2c-441b-8b36-ab2d8e153aa7
   :END:

   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
     (add-hook 'example-mode-hook          (lambda () (paredit-mode +1)))
     (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
     (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
     (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
     (add-hook 'slime-repl-mode-hook       (lambda () (paredit-mode +1)))
   #+end_src

** Projectile
   :PROPERTIES:
   :ID:       a86040e5-291f-4b62-ab76-f6b213a483c8
   :END:
   #+begin_src emacs-lisp
     (require 'projectile)
     (gsetq projectile-mode-line nil
            projectile-enable-caching t)

     (projectile-global-mode)

     (add-to-list 'projectile-project-root-files ".edts")
     (add-to-list 'projectile-project-root-files "erlang.mk")
   #+end_src
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (binarin/define-key
      "<f4>" 'replace-string
      "C-<f4>" 'replace-regexp
      "<f12>" 'magit-status)
   #+END_SRC
* Programming
** Perl
    #+begin_src emacs-lisp
      (fset 'perl-mode 'cperl-mode)

      (gsetq cperl-auto-newline t
	     cperl-hairy t
	     cperl-brace-offset 0   
	     cperl-close-paren-offset -4  
	     cperl-continued-brace-offset 0   
	     cperl-continued-statement-offset 4   
	     cperl-extra-newline-before-brace nil 
	     cperl-extra-newline-before-brace-multiline nil 
	     cperl-indent-level 4   
	     cperl-indent-parens-as-block t   
	     cperl-label-offset -4  
	     cperl-merge-trailing-else nil 
	     cperl-tab-always-indent t)

      (add-to-list 'auto-mode-alist '("\\.t$" . perl-mode))

      (defun binarin/cperl-mode-hook ()
	(origami-mode t)
	(hs-minor-mode t)
	(yas-minor-mode t)
	(setf prettify-symbols-alist '(("->" . ?→)
				       (">=" . ?≥)
				       ("<=" . ?≤)
				       ("<>" . ?≠)
				       ("=>" . ?⇒)))
  
	(prettify-symbols-mode t)
	(local-set-key (read-kbd-macro "C-c C-c") 'origami-forward-toggle-node)
	(local-set-key (read-kbd-macro "M-.") 'helm-etags-select)
	(setf tags-file-name (expand-file-name "TAGS" (projectile-project-root))
	      tags-table-list nil))

      (add-hook 'cperl-mode-hook 'binarin/cperl-mode-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode) ;; XXX prog-mode

   #+end_src

* File footer
** Apply delayed keybindings
   #+BEGIN_SRC emacs-lisp
     (binarin/apply-queued-keybindings)

   #+END_SRC
