#+TITLE: binarin's emacs configuration
#+OPTIONS: toc:4 h:4
* File header
  :PROPERTIES:
  :ID:       872629ce-4d48-47d4-b276-f7935cd31243
  :END:
** Enable lexical bindings
  #+begin_src emacs-lisp
    ;; -*- lexical-binding: t -*-
  #+end_src

** Load helper modules
  #+begin_src emacs-lisp
    (require 'cl-lib)
    (require 'f)
    (require 'anaphora)
  #+end_src

** Suppress some compiler warnings
  #+begin_src emacs-lisp
    (eval-when (compile load)
      (setf byte-compile-warnings '(not make-local)))
  #+end_src
** Use separate lisp file for customizations made through UI
   Load it here, so any lisp customizations can override customized values.
  #+begin_src emacs-lisp
    (setf custom-file (concat (file-name-directory binarin/primary-emacs-config) "custom.el"))
    (load-file custom-file)
  #+end_src

* Personal information
  :PROPERTIES:
  :ID:       04b545bf-52b7-412d-9ce5-80ee4bbe10cf
  :END:
  #+begin_src emacs-lisp
    (setf user-full-name "Alexey Lebedeff"
          user-mail-address "binarin@binarin.ru")
    (setf password-cache-expiry nil)
    (setf password-cache t)
  #+end_src
* Appearance
** Set window title
   Full name in window title, will be shown in xmobar.

   #+begin_src emacs-lisp
       (setq frame-title-format
             '((:eval (if (buffer-file-name)
                          (abbreviate-file-name (buffer-file-name))
                        "%b"))
               " - "
               invocation-name))
   #+end_src





** Fonts
   :PROPERTIES:
   :ID:       26d38fee-8252-4024-b0e8-1466ff4052c9
   :END:

  #+begin_src emacs-lisp
    (setq default-frame-alist '((font . "Iosevka-18")))
    ;; (defun my-fix-emojis (&optional frame)
    ;;   (when (window-system)
    ;;     (set-fontset-font "fontset-default" nil (font-spec :size 48 :name "Symbola") frame 'append)))
    ;; (my-fix-emojis)
    ;; (add-hook 'after-make-frame-functions 'my-fix-emojis)
  #+end_src

** Zooming
   #+begin_src emacs-lisp
     (autoload 'zoom-in/out "zoom-frm")
     (global-set-key (kbd "C-x C-+") 'zoom-in/out)
     (global-set-key (kbd "C-x C--") 'zoom-in/out)
     (global-set-key (kbd "C-x C-=") 'zoom-in/out)
     (global-set-key (kbd "C-x C-0") 'zoom-in/out)
     (setf frame-zoom-font-difference 2)
   #+end_src

** Estimated screen size
   :PROPERTIES:
   :ID:       5ee383df-5065-4f42-87ac-21975acebc72
   :END:

   #+begin_src emacs-lisp
     (defvar binarin/minimal-screen-width 111
       "'M+ 1mn' font at 18pt and 1366px screen gives us 111 characters.
        And it's just the right size")
   #+end_src

** Theme
   #+begin_src emacs-lisp
     (require 'zenburn-theme)
   #+end_src
** Line and column numbers
   #+begin_src emacs-lisp
     (line-number-mode t)
     (column-number-mode t)
   #+end_src
** Buffer names
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     (setq uniquify-separator "/")
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")
   #+end_src

** Remove visual clutter
   :PROPERTIES:
   :ID:       8ee1f692-db6b-4fac-bb48-edb5910c779b
   :END:

   #+begin_src emacs-lisp
     (awhen (window-system)
       (toggle-scroll-bar -1)
       (tool-bar-mode -1))
   #+end_src

** smart-mode-line
   #+begin_src emacs-lisp
     (require 'smart-mode-line)
     (setf sml/theme 'respectful)
     (sml/setup)
   #+end_src
** Truncate lines by default
   #+begin_src emacs-lisp
     (setq-default truncate-lines t)
   #+end_src
** Highlight parentheses
   :PROPERTIES:
   :ID:       239f7033-5510-42f0-aef9-98d6b35b7647
   :END:
   #+begin_src emacs-lisp
     (require 'highlight-parentheses)
     (defun turn-on-highlight-parentheses-mode ()
       (highlight-parentheses-mode t))
     (define-global-minor-mode global-highlight-parentheses-mode
       highlight-parentheses-mode
       turn-on-highlight-parentheses-mode)
     (global-highlight-parentheses-mode t)
   #+end_src
** Dired
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'dired-hide-details-mode)
   #+END_SRC
* Behaviour
** Narrowing
   #+BEGIN_SRC emacs-lisp
     (put 'narrow-to-region 'disabled nil)
   #+END_SRC
** Tramp
   #+BEGIN_SRC emacs-lisp
     (defun binarin/shell-command-to-string-remote-advice (orig-fun &rest args)
       (let ((shell-file-name (if (tramp-tramp-file-p default-directory)
                                  "/bin/sh"
                                shell-file-name)))
         (apply orig-fun args)))

     (advice-add 'shell-command-to-string :around #'binarin/shell-command-to-string-remote-advice)
   #+END_SRC
** Eshell
   :PROPERTIES:
   :ID:       712d9d5a-4541-43ba-b73a-963b86cd511c
   :END:
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "tramp"
       (lambda ()
         (add-hook 'eshell-mode-hook
                   'tramp-eshell-directory-change)))

     (eval-after-load "esh-module"
       (lambda ()
         (add-to-list 'eshell-modules-list 'eshell-tramp)))
   #+END_SRC
** Dired
   #+BEGIN_SRC emacs-lisp
     (setf dired-dwim-target t)
     (require 'dired-x)
     (setf dired-listing-switches "-al --group-directories-first")
   #+END_SRC
** Finding configuration pieces from optional directories
   #+begin_src emacs-lisp
     (defvar binarin/optional-config-repos-dir (expand-file-name "~/.rc.d/"))
     (defvar binarin/optional-config-repos (-map #'file-name-as-directory (directory-files binarin/optional-config-repos-dir t "^[0-9a-zA-Z]")))

     (defun binarin/optional-repo-files (filename)
       (loop for dir in binarin/optional-config-repos
             for fullname = (concat dir filename)
             when (file-exists-p fullname)
             collect fullname))
   #+end_src

** Search for authinfo files
   #+begin_src emacs-lisp
     (setf auth-sources (binarin/optional-repo-files ".authinfo.gpg"))
   #+end_src
** Prompt on C-x C-c - no more accidential exits
   :PROPERTIES:
   :ID:       4c9e3061-cfc7-420d-b82c-b8956b8fe95a
   :END:

#+begin_src emacs-lisp
  (setf confirm-kill-emacs #'y-or-n-p)
#+end_src

** Scrolling
   :PROPERTIES:
   :ID:       6ea7fb69-4f49-4fc6-b8cf-38fe4926b19e
   :END:

   Don't recenter point on redisplay, scroll just enough text to bring
   point into view, even if you move far away.

   #+begin_src emacs-lisp
   (setq scroll-conservatively 101)
   #+end_src

** undo-tree

   #+begin_src emacs-lisp
     (require 'undo-tree)
     (add-hook 'after-init-hook 'global-undo-tree-mode)
   #+end_src

** Copy/paste
   #+BEGIN_SRC emacs-lisp
     (setf select-enable-primary t)
     (setf select-enable-clipboard t)
   #+END_SRC
** Change "yes or no" to "y or n"
   :PROPERTIES:
   :ID:       28aa80f7-9512-43ac-ba91-c45510d86f2c
   :END:

   #+begin_src emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** Keyboard statistics
   #+begin_src emacs-lisp
     (require 'keyfreq)
     (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)
   #+end_src
** Whitespace handling
*** Tabs and spaces
    #+BEGIN_SRC emacs-lisp
      (setf indent-tabs-mode nil)
      (setf tab-width 8)
      (setq-default indent-tabs-mode nil)
    #+END_SRC
*** ws-butler
    Trims trailing whitespace, but only on lines that were edited.
    #+begin_src emacs-lisp
      (add-hook 'prog-mode-hook 'ws-butler-mode)
      (add-hook 'text-mode-hook 'ws-butler-mode)
    #+end_src

** I18n
*** Russian layout over Programmers Dvorak
    :PROPERTIES:
    :ID:       b04b5557-e261-4073-ac6b-93e62e587ed6
    :END:

    #+begin_src emacs-lisp
      ;; -*- coding: iso-2022-7bit-unix -*-
      (quail-define-package
       "russian-computer-d" "Russian" "RU" nil
       "ЙЦУКЕН Russian computer layout over Programmers Dvorak"
       nil t t t t nil nil nil nil nil t)

      ;;  №% "7 ?5 /3 (1 =9 *0 )2 +4 -6 !8 ;:
      ;;   Й  Ц  У  К  Е  Н  Г  Ш  Щ  З  Х  Ъ
      ;;    Ф  Ы  В  А  П  Р  О  Л  Д  Ж  Э
      ;;     Я  Ч  С  М  И  Т  Ь  Б  Ю  .,

      (quail-define-rules
       ("&" ?№)
       ("[" ?\")
       ("{" ??)
       ("}" ?/)
       ("(" ?()
       ("=" ?=)
       ("*" ?*)
       (")" ?))
       ("+" ?+)
       ("]" ?-)
       ("!" ?!)
       ("#" ?\;)
       ("%" ?%)
       ("7" ?7)
       ("5" ?5)
       ("3" ?3)
       ("1" ?1)
       ("9" ?9)
       ("0" ?0)
       ("2" ?2)
       ("4" ?4)
       ("6" ?6)
       ("8" ?8)
       ("`" ?:)

       ("$" ?ё)
       (";" ?й)
       ("," ?ц)
       ("." ?у)
       ("p" ?к)
       ("y" ?е)
       ("f" ?н)
       ("g" ?г)
       ("c" ?ш)
       ("r" ?щ)
       ("l" ?з)
       ("/" ?х)
       ("@" ?ъ)
       ("a" ?ф)
       ("o" ?ы)
       ("e" ?в)
       ("u" ?а)
       ("i" ?п)
       ("d" ?р)
       ("h" ?о)
       ("t" ?л)
       ("n" ?д)
       ("s" ?ж)
       ("-" ?э)
       ("\\" ?\\)
       ("'" ?я)
       ("q" ?ч)
       ("j" ?с)
       ("k" ?м)
       ("x" ?и)
       ("b" ?т)
       ("m" ?ь)
       ("w" ?б)
       ("v" ?ю)
       ("z" ?.)
       ("~" ?Ё)
       (":" ?Й)
       ("<" ?Ц)
       (">" ?У)
       ("P" ?К)
       ("Y" ?Е)
       ("F" ?Н)
       ("G" ?Г)
       ("C" ?Ш)
       ("R" ?Щ)
       ("L" ?З)
       ("?" ?Х)
       ("^" ?Ъ)
       ("A" ?Ф)
       ("O" ?Ы)
       ("E" ?В)
       ("U" ?А)
       ("I" ?П)
       ("D" ?Р)
       ("H" ?О)
       ("T" ?Л)
       ("N" ?Д)
       ("S" ?Ж)
       ("_" ?Э)
       ("|" ?|)
       ("\"" ?Я)
       ("Q" ?Ч)
       ("J" ?С)
       ("K" ?М)
       ("X" ?И)
       ("B" ?Т)
       ("M" ?Ь)
       ("W" ?Б)
       ("V" ?Ю)
       ("Z" ?,))
    #+end_src

*** Prefer Russian and UTF-8
#+begin_src emacs-lisp
  (set-language-environment "Russian")
  (setq default-input-method "russian-computer-d")
  (prefer-coding-system 'utf-8-unix)
#+end_src
** Helm
   :PROPERTIES:
   :ID:       8a6ae7ca-1e23-4820-b260-4ece0d844335
   :END:

   #+begin_src emacs-lisp
     (require 'helm-mode)
     (global-unset-key (kbd "C-x c"))

     ;; (require 'helm-org)
     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
     (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

     (when (executable-find "curl")
       (setq helm-google-suggest-use-curl-p t))

     (setq helm-quick-update                     t ; do not display invisible candidates
           helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
           helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
           ;; helm-move-to-line-cycle-in-source     nil ; don't move to end or beginning of source when reaching top or bottom of source.
           helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
           helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
           helm-ff-file-name-history-use-recentf t)

       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "M-y") 'helm-show-kill-ring)
       (global-set-key (kbd "C-x b") 'helm-mini)
       (global-set-key (kbd "C-x C-b") 'helm-mini)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (global-set-key [f3] 'helm-find-files)

       (helm-mode 1)
   #+end_src

** Startup
   #+begin_src emacs-lisp
       (setq inhibit-startup-screen t)
   #+end_src

** Projectile
   :PROPERTIES:
   :ID:       a86040e5-291f-4b62-ab76-f6b213a483c8
   :END:
   #+begin_src emacs-lisp
     (require 'projectile)
     (setf projectile-mode-line nil
           projectile-enable-caching t
           projectile-git-command (f-expand "~/.rc/projectile-git-command.sh"))

     (message "Preload")

     (projectile-global-mode)

     (add-to-list 'projectile-project-root-files ".edts")
     (add-to-list 'projectile-project-root-files "erlang.mk")

     (require 'helm-projectile)
     (helm-projectile-on)

     ;; Bad interaction happens between epg, tramp and projectile.
     ;; Waiting for proper fix of https://github.com/bbatsov/projectile/issues/835
     (defun binarin/disable-delete-file-advice (orig-fun &rest args)
       (let ((was-active (and (ad-is-active 'delete-file)
                              (ad-deactivate 'delete-file))))
         (unwind-protect
             (apply orig-fun args)
           (when was-active (ad-activate 'delete-file)))))

     (advice-add 'epg-delete-output-file :around #'binarin/disable-delete-file-advice)

   #+end_src
** Yasnippet
   :PROPERTIES:
   :ID:       8db682fa-6f3f-4726-bb46-7b577e9919e4
   :END:
   #+begin_src emacs-lisp
     (require 'yasnippet)
     (setf yas-snippet-dirs '("~/.rc/snippets" yas-installed-snippets-dir))
     (yas-global-mode 1)
   #+end_src

** Eshell in projectile root
   #+begin_src emacs-lisp
     (defun binarin/projectile-eshell  ()
       (interactive)
       (let* ((height (/ (window-total-height) 3))
              (default-directory (projectile-project-root))
              (eshell-buffer-name (concat "*eshell: " (abbreviate-file-name default-directory) "*")))
         (split-window-vertically (- height))
         (other-window 1)
         (eshell)))

     (defun eshell/n ()
       (if (window-parent)
           (delete-window)
         (switch-to-buffer (other-buffer))))

     (global-set-key (kbd "C-!") #'binarin/projectile-eshell)
   #+end_src

** Paredit
   :PROPERTIES:
   :ID:       13fbc9ee-bd2c-441b-8b36-ab2d8e153aa7
   :END:

   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
     (add-hook 'example-mode-hook          (lambda () (paredit-mode +1)))
     (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
     (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
     (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
     (add-hook 'slime-repl-mode-hook       (lambda () (paredit-mode +1)))
   #+end_src

** Magit
   #+begin_src emacs-lisp
     (global-set-key [f12] #'magit-status)
   #+end_src

** Autosaving

   Save backups to one place and don't clutter filesystem with files ending in ~.
   #+begin_src emacs-lisp
     (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+end_src

   As Sacha Chua put it, "Disk space is cheap. Save lots".
   #+begin_src emacs-lisp
     (setq delete-old-versions -1)
     (setq version-control t)
     (setq vc-make-backup-files t)
     (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** File locking

   I don't care about preventing simultaneous edits, it still will be
   detected when saving is made. But disabling it prevents our working
   dirs from being clobbered with lock-files.
   #+begin_src emacs-lisp
     (setf create-lockfiles nil)
   #+end_src

** Saving history
    :PROPERTIES:
    :ID:       9dea8cec-794d-4757-84de-2c166ce10567
    :END:
    #+begin_src emacs-lisp
      (setf savehist-additional-variables '(search-ring kill-ring regexp-search-ring)
            savehist-autosave-interval 60 ;; from default 300
            history-length t
            history-delete-duplicates t)
      (savehist-mode t)
    #+end_src

    #+begin_src emacs-lisp
      (setf recentf-max-saved-items 200)
    #+end_src

    #+begin_src emacs-lisp
      (save-place-mode t)
    #+end_src

** Automatically make scripts executable
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-save-hook
               'executable-make-buffer-file-executable-if-script-p)
   #+END_SRC
** Embedded WebKit
   #+BEGIN_SRC emacs-lisp
     ;; make these keys behave like normal browser

     (eval-after-load "xwidget"
       (lambda ()
         (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
         (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
         (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)
         (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)
         (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)
         (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill)))

     ;; adapt webkit according to window configuration chagne automatically
     ;; without this hook, every time you change your window configuration,
     ;; you must press 'a' to adapt webkit content to new window size
     (defun binarin/adjust-xwidget-size-hook ()
       (when (equal major-mode 'xwidget-webkit-mode)
         (xwidget-webkit-adjust-size-dispatch)))

     (add-hook 'window-configuration-change-hook #'binarin/adjust-xwidget-size-hook)

     ;; by default, xwidget reuses previous xwidget window,
     ;; thus overriding your current website, unless a prefix argument
     ;; is supplied
     ;;
     ;; This function always opens a new website in a new window
     (defun xwidget-browse-url-no-reuse (url &optional session)
       (interactive (progn
                      (require 'browse-url)
                      (browse-url-interactive-arg "xwidget-webkit URL: "
                                                  )))
       (xwidget-webkit-browse-url url t))

   #+END_SRC
** Viewing PDF inside emacs
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'pdf-tools-install)
   #+END_SRC
** Other window scrolling
   Scroll PDF by page in other window.

   #+BEGIN_SRC emacs-lisp
     (defun binarin/scroll-other-window (&optional arg)
       (interactive "P")
       (awhen (ignore-errors (other-window-for-scrolling))
         (let* ((buffer (window-buffer it))
                (mode (with-current-buffer buffer major-mode)))
           (cond
            ((eq mode 'pdf-view-mode)
             (save-selected-window
               (select-window it)
               (with-current-buffer buffer
                 (pdf-view-next-page (cond ((eq arg '-) -1)
                                           ((numberp arg) arg)
                                           (t 1))))))
            (t (scroll-other-window arg))))))

     (global-set-key (kbd "C-M-v") #'binarin/scroll-other-window)
   #+END_SRC

** Window handling
   #+BEGIN_SRC emacs-lisp
     (winner-mode 1)
   #+END_SRC
** Using settings from .editorconfig
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook #'(lambda () (editorconfig-mode 1)))
     (add-hook 'text-mode-hook #'(lambda () (editorconfig-mode 1)))
   #+END_SRC
** Completion
   #+BEGIN_SRC emacs-lisp
   ;; (global-company-mode t)
   #+END_SRC

* Org
** Hacks
   #+BEGIN_SRC emacs-lisp
     (defun binarin/org-reveal-tags ()
       (outline-flag-region (point) (line-end-position) nil))

     (add-hook 'org-after-tags-change-hook #'binarin/org-reveal-tags)
   #+END_SRC

** Blogging
   #+BEGIN_SRC emacs-lisp
     (defvar binarin/blog-dir "~/blog")
     (defvar binarin/blog-source "~/org/blog.org")

     (defun binarin/is-blog-entry-publishable (props)
       (let ((todo (cdr (assoc "TODO" props))))
         (or (string= todo "STARTED")
             (string= todo "READY__")
             (string= todo "PUBLISH"))))

     (defun binarin/is-blog-draft (props)
       (let ((todo (cdr (assoc "TODO" props))))
         (or (string= todo "STARTED")
             (string= todo "READY__"))))

     (defun binarin/is-blog-post (tags)
       (member "post" tags))

     (defun binarin/blog-post-timestamp (props)
       (or (cdr (assoc "TIMESTAMP_IA" props))
           (format-time-string "%Y-%m-%d 00:00:00")))

     (defun binarin/blog-publish ()
       (save-mark-and-excursion
         ;; map over all tasks entries
         (let* ((blog-file binarin/blog-source)
                (posts-dir (expand-file-name "_posts" binarin/blog-dir))
                (yaml-front-matter '(("layout" . "default"))))
           (find-file blog-file)
           (push-mark (point-min))
           (push-mark (point-max) nil t)
           (goto-char (point-min))
           (save-restriction
             (widen)
             (org-map-region
              (lambda ()
                (let* ((props (org-entry-properties))
                       (todo (cdr (assoc "TODO" props)))
                       (tags (org-get-tags)))
                  (when (and (binarin/is-blog-post tags)
                             (binarin/is-blog-entry-publishable props))
                    (let* ((heading (org-get-heading t t))
                           (is-draft (binarin/is-blog-draft props))
                           (time (binarin/blog-post-timestamp props))
                           (title (replace-regexp-in-string
                                   "[:=\(\)\?]" ""
                                   (replace-regexp-in-string
                                    "[ \t]" "-" heading)))
                           (str-time (and (string-match "\\([[:digit:]\-]+\\) " time)
                                          (match-string 1 time)))
                           (to-file (format "%s-%s.html" str-time title))
                           (org-buffer (current-buffer))
                           (id (org-id-get-create))
                           (yaml-front-matter `(("title" . ,heading)
                                                ("draft" . ,(if is-draft "true" "false"))
                                                ("layout" . "default")))
                           (html (save-excursion
                                   (save-restriction
                                     (org-narrow-to-subtree)
                                     (let ((org-export-show-temporary-export-buffer nil))
                                       (org-html-export-as-html nil nil nil t))))))
                      (with-temp-file (expand-file-name to-file posts-dir)
                        (when yaml-front-matter
                          (insert "---\n")
                          (mapc (lambda (pair) (insert (format "%s: %s\n" (car pair) (cdr pair))))
                                yaml-front-matter)
                          (insert "---\n\n"))
                        (insert-buffer html))))))
              0 (point-max))))))

   #+END_SRC
** Custom sorting

#+begin_src emacs-lisp
  (defvar binarin/priority-todos-for-sorting '("STARTED" "WAITING"))
  (defun binarin/todo-to-started-first-int ()
    "Default todo order is modified by giving more priority to
  todo's from binarin/priority-todos-for-sorting and entries
  without any todo keywords at all."
    (let* ((props (org-entry-properties))
           (item-todo (cdr (assoc "TODO" props)))
           (item-prio (- (aif (cdr (assoc "PRIORITY" props))
                             (aref it 0)
                           org-default-priority)
                         org-highest-priority))
           (modified-todo-order
            (append binarin/priority-todos-for-sorting
                    (-remove #'(lambda (todo) (member todo binarin/priority-todos-for-sorting)) org-todo-keywords-1)))
           (todo-idx (if item-todo (1+ (-elem-index item-todo modified-todo-order)) 0))
           (prio-range (1+ (- org-default-priority org-highest-priority))))
      (+ (* prio-range todo-idx) item-prio)))

  (defun binarin/org-sort-entries ()
    (interactive)
    (org-sort-entries nil ?f #'binarin/todo-to-started-first-int)
    (org-cycle)
    (org-cycle))
#+end_src

** Defaults
   #+BEGIN_SRC emacs-lisp
     (require 'org-habit)
   #+END_SRC
** Todo states
   #+begin_src emacs-lisp
     (setq org-enforce-todo-dependencies t)

     (setq org-use-fast-todo-selection 'prefix)
     (setq org-fast-tag-selection-single-key t)

     (setq org-todo-keywords
           '((sequence "TODO___(t)" "STARTED(s)" "|" "DONE___(d!)")
             (sequence "BUY____(b)" "BUYING_(y)" "|" "BOUGHT_(g)")
             (type "|" "CANCELD(c)")
             (type "WAITING(w)" "|")))

     (setq org-todo-keyword-faces
           '(("TODO___" :foreground "red" :weight bold)
             ("STARTED" :foreground "red" :weight bold)
             ("DONE___" :foreground "forest green" :weight bold)
             ("PUBLISH" :foreground "forest green" :weight bold)

             ("BUY____" :foreground "red" :weight bold)
             ("BUYING_" :foreground "#93e0e3" :weight bold)
             ("BOUGHT_" :foreground "forest green" :weight bold)

             ("WAITING" :foreground "orange3" :weight bold)
             ("CANCELD" :foreground "forest green" :weight bold)))

     (setq org-todo-state-tags-triggers
           '(("STARTED" ("NEXT" . t))
             (done ("NEXT"))
             ("WAITING" ("NEXT"))
             ("CANCELD" ("NEXT"))))

     (setq org-clock-in-switch-to-state
           (lambda (state)
             (cond
              ((or (string= state "BUY____")
                   (string= state "BOUGHT_"))
               "BUYING_")
              (t "STARTED"))))

   #+end_src
** Contexts
   #+begin_src emacs-lisp
     (setq context-tags
           '(("HOME" . ?h)  ;; nagornaya
             ("DOBR" . ?d)  ;; dobrynka
             ("WORK" . ?w)  ;; office
             ("AUTO" . ?r)  ;; in or around the car
             ("CITY" . ?y)  ;; on the go
             ("COMP" . ?c)  ;; some place that has trusted computer
             ("PHON" . ?o)  ;; anywhere where I can make phone call
             ))

     (setq context-tag-includes
           '(("HOME" "COMP" "PHON")
             ("DOBR" "COMP" "PHON")
             ("WORK" "COMP" "PHON")
             ("AUTO" "CITY" "PHON")
             ("CITY" "PHON")))

     (setq org-tag-alist `((:startgroup . nil) ;; contexts
                           ,@context-tags
                           (:endgroup . nil)
                           ("AGND" . ?a)
                           ("PROJ" . ?p)
                           ("NEXT" . ?n)
                           ("HABT" . ?b)))
   #+end_src
** Agenda files
   Expand filenames so we can later directly compare them with (buffer-file-name)
   #+begin_src emacs-lisp
     (setf org-agenda-files
           (-map #'f-expand
                 (-filter #'f-exists?
                          '("~/org/personal.org"
                            "~/org/refile.org"
                            "~/org/subscriptions.org"
                            "~/org/mirantis.org"
                            "~/org/mira-cal.org"
                            "~/.rc/emacs-config.org"
                            "~/org/ference.org"))))
   #+end_src
** Agendas
   #+begin_src emacs-lisp
     (define-key global-map "\C-ca" 'org-agenda)
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-include-diary t)
     (setq org-agenda-span 'day)
     (setq org-agenda-start-on-weekday 1)
     (setq org-agenda-window-setup 'current-window)


     (setq org-agenda-todo-ignore-with-date t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-timestamp-if-done t)

     (setq org-deadline-warning-days 30)
     (setq org-agenda-window-frame-fractions '(1 . 1))
     (setq org-agenda-restore-windows-after-quit t)

     (setf org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60))
     (setf org-clock-report-include-clocking-task 't)


   #+END_SRC

   #+begin_src emacs-lisp
     (defun binarin/agenda-sorter-tag-first (tag)
       #'(lambda (a b)
           (let ((ta (member (downcase tag) (get-text-property 1 'tags a)))
                 (tb (member (downcase tag) (get-text-property 1 'tags b))))
             (cond
              ((and ta tb) nil)
              ((not ta) -1)
              (t +1)))))


     (defvar binarin/org-include-scheduled-todos
       '((org-agenda-todo-ignore-scheduled nil)
         (org-agenda-todo-ignore-deadlines nil)
         (org-agenda-todo-ignore-with-date nil))
       "Items with scheduling information are usually hidden from
     agendas, but sometimes we want to include everything. This list
     will spliced into org-agenda-custom-commands on such occasions.
     ")

     (defvar binarin/project-matcher
       "+PROJ/-DONE___-BOUGHT_-WAITING-SOMEDAY-CANCELD")

     (defun binarin/todo-filter-for-context (context)
       "Generates tags-todo filter string for a given context"
       (mapconcat 'identity
                  (list* "+NEXT"
                         (cl-remove-if (lambda (elt)
                                         (member elt (or (assoc context context-tag-includes)
                                                         context)))
                                       (mapcar 'car context-tags)))
                  "-"))


     (setq org-agenda-custom-commands
           `(("s" "Started Tasks" todo "STARTED" ,binarin/org-include-scheduled-todos)
             ("w" "Tasks waiting on something" todo "WAITING" ((org-use-tag-inheritance nil)))
             ("r" "Refile New Notes and Tasks" tags "LEVEL=1+REFILE" ,binarin/org-include-scheduled-todos)
             ("p" "Projects" tags-todo ,binarin/project-matcher nil)
             ("l" . "Context-based agenda")
             ("la" "Agenda and people agenda"
              ((agenda "")
               (tags-todo "+NEXT+AGND"
                          ((org-agenda-todo-ignore-scheduled t)
                           (org-agenda-dim-blocked-tasks 'invisible)
                           (org-agenda-todo-ignore-deadlines t)
                           (org-agenda-sorting-strategy '(priority-down user-defined-down category-up))
                           (org-agenda-cmp-user-defined 'agenda-sort-home-tags-first)))))
             ,@(loop for (tag . char) in context-tags
                     collect (list (concat "l" (char-to-string char))
                                   (concat "Agenda and context " tag)
                                   `((agenda "")
                                     (tags-todo ,(binarin/todo-filter-for-context tag)
                                                ((org-agenda-todo-ignore-scheduled t)
                                                 (org-agenda-todo-ignore-deadlines t)
                                                 (org-agenda-sorting-strategy '(priority-down user-defined-down category-up))
                                                 (org-agenda-cmp-user-defined ',(binarin/agenda-sorter-tag-first tag)))))
                                   `((org-agenda-dim-blocked-tasks 'invisible))))))

     (setq org-agenda-tags-todo-honor-ignore-options t)
   #+end_src
** Projects
   #+begin_src emacs-lisp
     (setf org-stuck-projects
           `(,binarin/project-matcher ("WAITING") ("NEXT") ""))
     (setq org-tags-exclude-from-inheritance '("PROJ"))
   #+end_src
** Capture
   #+begin_src emacs-lisp
     (setq org-default-notes-file "~/org/refile.org")
     (define-key global-map "\C-cr" 'org-capture)

     (setq org-capture-templates
           '(("t" "todo" entry
              (file "~/org/refile.org")
              "* TODO___ %?\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %u\n  %a" :prepend t :kill-buffer nil)
             ("w" "org-protocol" entry
              "* TODO___ %c\n\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:  %U" :prepend t :immediate-finish t :kill-buffer nil)
             ("l" "Link" entry
              (file "~/org/refile.org")
              "* TODO___ %a\n  :PROPERTIES:\n  :ID: %(org-id-new)\n  :END:\n  %U\n\n  %i" :prepend t :immediate-finish t :kill-buffer nil)))

     (defvar binarin/org-protocol-mundane-link-descriptions
       '(" - alebedev@mirantis.com - Mirantis, Inc. Mail"
         " - binarin@gmail.com - Gmail"
         " : Bugs : Mirantis OpenStack"
         " : Bugs : Fuel for OpenStack"))

     (defun binarin/org-protocol-capture-postprocess ()
       (awhen (re-search-forward (concat (regexp-opt binarin/org-protocol-mundane-link-descriptions t) "]]") nil t)
         (replace-match "]]")))

     (add-hook 'org-capture-prepare-finalize-hook #'binarin/org-protocol-capture-postprocess)
   #+end_src
** Drawers
   #+BEGIN_SRC emacs-lisp
     (setq org-drawers '("PROPERTIES" "LOGBOOK" "CLOCK" "FILES"))
     (setq org-clock-into-drawer "CLOCK")
     (setq org-export-with-drawers t)
   #+END_SRC
** Clocking
   #+begin_src emacs-lisp
     ;; Yes it's long... but more is better ;)
     (setf org-clock-history-length 35)

     ;; Resume clocking task on clock-in if the clock is open
     (setf org-clock-in-resume t)

     ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
     (setf org-clock-out-remove-zero-time-clocks t)

     ;; Don't clock out when moving task to a done state
     (setf org-clock-out-when-done nil)

     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setf org-clock-persist t)

     ;; Keep clocks running
     (setf org-remember-clock-out-on-exit nil)

     (setq org-log-into-drawer t)

     (org-clock-persistence-insinuate)

     (setq org-time-stamp-rounding-minutes (quote (1 15)))

     (setq org-columns-default-format "%85ITEM(Task) %8Effort(Effort){:} %8CLOCKSUM")
     (setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00"))))


     (require 'org-clock)
     (add-hook 'emacs-startup-hook #'org-clock-load)

     (defun binarin/clockout-nagger ()
       (call-process "desktop-nagger" nil nil nil))

     (defun binarin/clockout-remove-nagger ()
       (call-process "pkill" nil nil nil "-f" "desktop-nagger"))

     (add-hook 'org-clock-out-hook #'binarin/clockout-nagger)
     (add-hook 'org-clock-in-hook #'binarin/clockout-remove-nagger)
   #+end_src
** Templates
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist '("l"  "#+BEGIN_SRC emacs-lisp\n\n#+END_SRC" "<src lang=\"emacs-lisp\">\n\n</src>"))
   #+END_SRC
** Appearance
   #+begin_src emacs-lisp
     (setf org-pretty-entities nil)
     (setf org-agenda-dim-blocked-tasks t)
     (setf org-ellipsis " ▾")
     (setq org-cycle-separator-lines 0)
   #+end_src

   #+begin_src emacs-lisp
     (setf org-tags-column (- (length org-ellipsis) binarin/minimal-screen-width)
	   org-agenda-tags-column (- (length org-ellipsis) binarin/minimal-screen-width))
   #+end_src

   #+begin_src emacs-lisp
     (setf org-habit-graph-column (- binarin/minimal-screen-width
				     org-habit-preceding-days
				     org-habit-following-days
				     1))
   #+end_src
** Behaviour
   #+begin_src emacs-lisp
     (setf org-reverse-note-order t)
     (setq org-outline-path-complete-in-steps nil)
     (setf org-catch-invisible-edits 'smart)
     (setq org-return-follows-link t)
     (setf org-id-link-to-org-use-id t)
     (setf org-fast-tag-selection-include-todo nil)
     (setf org-use-speed-commands t)
   #+end_src
** Refiling
   #+BEGIN_SRC emacs-lisp
     ;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
     (setq org-refile-targets
           '((org-agenda-files :maxlevel . 5)
             (nil :maxlevel . 5)))

     ;; Targets start with the file name - allows creating level 1 tasks
     (setq org-refile-use-outline-path 'file)
   #+END_SRC

** Persistence
   Synchronization is performed by external process, so try to be in
   sync with disk.
   #+BEGIN_SRC emacs-lisp
     (run-at-time nil 60 'org-save-all-org-buffers)
     (add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))
   #+END_SRC
** Export
   #+BEGIN_SRC emacs-lisp
     (eval-after-load "ox" (lambda () (require 'htmlize)))
   #+END_SRC
** Mobile sync
    Don't sync with mobile calendars that were downloaded from Google.

    #+begin_src emacs-lisp
      (setf org-mobile-files (-filter #'(lambda (file) (not (s-suffix? "-cal.org" file))) org-agenda-files))
    #+end_src

    #+begin_src emacs-lisp
      (setf org-mobile-inbox-for-pull "~/org/refile.org")
      (setq org-mobile-directory (expand-file-name "~/Dropbox/org/"))
    #+end_src

** Capture
   #+BEGIN_SRC emacs-lisp
     (require 'org-protocol)
     (autoload 'notifications-notify "notifications")


     (defun binarin/display-notify-after-capture (&rest args)
       (notifications-notify
        :title "Link captured"
        :body (cadar org-stored-links)
        :app-name "emacs"
        :app-icon (expand-file-name "~/.rc/org.svg")
        :timeout 3000
        :urgency 'low))


     (advice-add 'org-protocol-do-capture :after #'binarin/display-notify-after-capture)
   #+END_SRC

** Priorities
   #+BEGIN_SRC emacs-lisp
     (setq org-default-priority 68)
   #+END_SRC
** Notifications
   #+BEGIN_SRC emacs-lisp

     (require 'appt)

     (defun binarin/refresh-appts ()
       (org-agenda-to-appt t))

     ;; Run once, activate and schedule refresh
     (binarin/refresh-appts)
     (appt-activate t)
     (run-at-time "24:01" nil #'binarin/refresh-appts)

     ; Update appt each time agenda opened.
     (add-hook 'org-finalize-agenda-hook #'binarin/refresh-appts)

     (defvar binarin/last-appt-notify-id nil)

     (defun binarin/appt-notify (min-to-app new-time msg)
       (setf binarin/last-appt-notify-id
             (notifications-notify
              :title "Appointment"
              :body (if (listp msg) (string-join msg "\\n") msg)
              :timeout 5000
              :urgency 'normal)))


     ; Setup zenify, we tell appt to use window, and replace default function
     (setf appt-display-format 'window)
     (setf appt-disp-window-function #'binarin/appt-notify)
     (setf appt-message-warning-time 10)


   #+END_SRC

* Communication
** Email
*** Load custom-built mu4e
    #+begin_src emacs-lisp
      (add-to-list 'load-path "/run/current-system/sw/share/emacs/site-lisp/mu4e")
      (add-to-list 'load-path "~/apps/mu/share/emacs/site-lisp/mu4e")
      (autoload 'mu4e "mu4e" nil t)

      (setf mu4e-mu-binary "/run/current-system/sw/bin/mu")
    #+end_src

*** Unread count extension

    #+begin_src emacs-lisp
      (eval-after-load "mu4e"
        #'(lambda ()
            (require 'mu4e-maildirs-extension)
            (mu4e-maildirs-extension)
            (define-key mu4e-main-mode-map "n" #'next-line)
            (define-key mu4e-main-mode-map "p" #'previous-line)
            (setf mu4e-maildirs-extension-count-command-format
                  (replace-regexp-in-string "^mu" mu4e-mu-binary mu4e-maildirs-extension-count-command-format))

            (setf mu4e-maildirs-extension-custom-list (-remove #'(lambda (x) (or (s-contains? "[Gmail]" x)
                                                                                 (s-contains? "archive-" x)
                                                                                 (s-contains? "Trash" x))) (mu4e-get-maildirs)))
            (setf mu4e-maildirs-extension-insert-before-str "\n  Basics")))


    #+end_src

*** Multiple mail accounts
    #+begin_src emacs-lisp
      (defvar binarin/gmail-accounts '("binarin@gmail.com" "binarin@binarin.ru" "alebedev@mirantis.com"))

      (setf mu4e-user-mail-address-list binarin/gmail-accounts
            mu4e-context-policy 'pick-first)

      (defun binarin/gmail-maildir (email dir)
        (concat "/" email "/" dir))

      (defun binarin/gmail-archive-dir (email folder)
        "\"archive-\" is prefix because of way mu handles wildcards
        like \"/dir/\*\", which is actually interpreted as \"/dir*\""
        (concat "/archive-" email "/" folder))

      (setf message-send-mail-function 'smtpmail-send-it
            smtpmail-default-smtp-server "smtp.gmail.com"
            smtpmail-smtp-server "smtp.gmail.com"
            smtpmail-smtp-service 465
            smtpmail-stream-type 'ssl)

      (defun binarin/make-maildir-mu4e-context (account)
        (make-mu4e-context
         :name account
         :match-func #'(lambda (msg)
                         (when msg
                           (s-equals? account (binarin/mu4e-maildir-to-account
                                               (mu4e-message-field msg :maildir)))))
         :vars `((mail-reply-to . ,account)
                 (user-mail-address . ,account)
                 (smtpmail-smtp-user . ,account))))

      (defun binarin/make-mu4e-contexts ()
        (-map 'binarin/make-maildir-mu4e-context binarin/gmail-accounts))

      (eval-after-load "mu4e" '(setf mu4e-contexts (binarin/make-mu4e-contexts)))

      (defun binarin/mu4e-maildir-to-account (maildir)
        (caddr (s-match "^/\\(archive-\\)?\\([^/]+?\\)/" maildir)))

      (defun binarin/mu4e-sibling-folder (maybe-maildir folder)
        (let ((account (if maybe-maildir
                           (binarin/mu4e-maildir-to-account maybe-maildir)
                         (mu4e-context-name mu4e~context-current))))
          (binarin/gmail-maildir account folder)))

      (defun binarin/mu4e-drafts-folder (maybe-maildir)
        )

      (defun binarin/mu4e-sibling-archive-folder (maildir folder)
        (binarin/gmail-archive-dir (binarin/mu4e-maildir-to-account maildir) folder))



      (setf mu4e-maildir       "~/.mail/"
            mu4e-refile-folder #'(lambda (msg) (binarin/mu4e-sibling-archive-folder (mu4e-message-field msg :maildir) "Archive"))
            mu4e-sent-folder   #'(lambda (msg) (binarin/mu4e-sibling-folder (mu4e-message-field msg :maildir) "Sent"))
            mu4e-drafts-folder #'(lambda (msg) (binarin/mu4e-sibling-folder (and msg (mu4e-message-field msg :maildir)) "Drafts"))
            mu4e-trash-folder  #'(lambda (msg) (binarin/mu4e-sibling-archive-folder (mu4e-message-field msg :maildir) "Trash")))

    #+end_src

*** Appearance
    :PROPERTIES:
    :ID:       b6fdc1ae-0a67-4812-9de0-d36cf22f45fe
    :END:

#+begin_src emacs-lisp
  (autoload 'mu4e-shr2text "mu4e-contrib")
  (setq mu4e-html2text-command 'mu4e-shr2text)

  (defun binarin/mu4e-view-mode-hook ()
    (yas-minor-mode nil)
    (setf fill-column 80)
    (visual-line-mode t)
    ;; (visual-fill-column-mode t)
    )

  (add-hook 'mu4e-view-mode-hook #'binarin/mu4e-view-mode-hook)

  (setq mu4e-view-show-images t)

  (setq mu4e-headers-show-threads t)

  ;; use 'fancy' non-ascii characters in various places in mu4e
  (setq mu4e-use-fancy-chars nil)

  (setf mu4e-headers-fields '((:human-date . 12)
                              (:flags . 6)
                              (:mailing-list . 10)
                              (:from . 22)
                              (:thread-subject)))
#+end_src

*** Behaviour
    :PROPERTIES:
    :ID:       2721952e-54d4-423b-8b65-cbb580f4f2d4
    :END:

    mu4e regenerates main buffer on exiting headers view. But it's annoying when main buffer also
    contains mu4e-maildirs-extension output, because position is lost and it's inconvinient for
    reading unread mailboxes sequentially.
    #+begin_src emacs-lisp
      (defun binarin/mu4e~headers-quit-buffer--non-destructive ()
        (interactive)
        (aif (get-buffer mu4e~main-buffer-name)
            (cl-letf (((symbol-function 'mu4e~main-view) (lambda () nil)))
              (mu4e~headers-quit-buffer)
              (switch-to-buffer it))
            (mu4e~headers-quit-buffer)))

      (eval-after-load "mu4e"
        #'(lambda () (define-key mu4e-headers-mode-map (kbd "q") #'binarin/mu4e~headers-quit-buffer--non-destructive)))
    #+end_src

    Sync mail in background after exiting mu4e
    #+begin_src emacs-lisp
      (defun binarin/mu4e-quit ()
        (interactive)
        (mu4e-update-mail-and-index t)
        (mu4e-quit))

      (eval-after-load "mu4e"
        '(define-key mu4e-main-mode-map "q" #'binarin/mu4e-quit))
    #+end_src


    This is needed for mbsync compatibility:
    #+begin_src emacs-lisp
      (setf mu4e-change-filenames-when-moving t)
    #+end_src

    Don't save messages to Sent Messages, Gmail/IMAP takes care of this.
    #+begin_src emacs-lisp
      (setq mu4e-sent-messages-behavior 'delete)
    #+end_src

    Use helm for completion
    #+begin_src emacs-lisp
      (defun binarin/mu4e-read-option (prompt options)
        (helm-comp-read prompt (-map (lambda (option)
                                       (cons (replace-regexp-in-string "^\\(.\\)" "[\\1]" (car option))
                                             (cdr option)))
                                     options)
                        ;; :sort #'(lambda (a b)
                        ;;           (string-lessp (car a) (car b)))
                        ))

      (eval-after-load "mu4e" '(fset 'mu4e-read-option 'binarin/mu4e-read-option))
    #+end_src

    Mark messages as read while refiling
    #+begin_src emacs-lisp
      (eval-after-load "mu4e"
        #'(lambda ()
            (setf (cdr (assoc 'refile mu4e-marks))
                  '(:char ("r" . "▶")
                          :prompt "refile"
                          :dyn-target (lambda (target msg) (mu4e-get-refile-folder msg))
                          :action (lambda (docid msg target)
                                    (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N"))))))
    #+end_src

    #+begin_src emacs-lisp
      ;; save attachment to my desktop (this can also be a function)
        (setq mu4e-attachment-dir "~/Downloads")

      (setf mu4e-hide-index-messages t)
      (setf mu4e-get-mail-command (s-concat "parallel --no-notice mbsync ::: " (s-join " " binarin/gmail-accounts)))
      (setf mu4e-confirm-quit nil
            mu4e-headers-leave-behavior 'apply)

      (defun binarin/lazy-load-org-mu4e ()
        (autoload 'org-mu4e-open "org-mu4e")
        (autoload 'org-mu4e-store-link "org-mu4e")
        (org-link-set-parameters "mu4e"
                                 :follow #'org-mu4e-open
                                 :store #'org-mu4e-store-link))

      (eval-after-load "org" '(when (fboundp 'mu4e) (binarin/lazy-load-org-mu4e)))

      ;; (defhydra binarin/mu4e-hydra (:exit t :color red)
      ;;   "Some useful mu4e bookmarks"
      ;;   ("i" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "maildir:/INBOX")) "INBOX")
      ;;   ("u" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "flag:unread AND NOT maildir:/Trash and NOT maildir:/Lists.Yandex.bbs and NOT maildir:/Yandex.bike")) "Unread work messages")
      ;;   ("f" (progn (mu4e-update-mail-and-index nil) (mu4e-headers-search "flag:unread AND NOT maildir:/Trash and NOT maildir:/Yandex.direct-dev and NOT maildir:/Yandex.direct-review and NOT maildir:/Yandex.perl-dev and NOT maildir:/Yandex.redrose-announces and NOT maildir:/Yandex.staff and NOT maildir:/INBOX")) "Unread fun messages"))


      ;; (global-set-key (kbd "<f9>") #'binarin/mu4e-hydra/body)
    #+end_src

* Programming
** helm-dash for documentation
   #+BEGIN_SRC emacs-lisp
     (defun binarin/helm-dash-browse-url (url &optional session)
       (other-window 1)
       (xwidget-browse-url-no-reuse url))

     (setf helm-dash-browser-func #'binarin/helm-dash-browse-url)
   #+END_SRC
** Tags
   #+BEGIN_SRC emacs-lisp
     (setf tags-revert-without-query t)
   #+END_SRC
** Elm
   #+BEGIN_SRC emacs-lisp
     (defun binarin/elm-mode-hook ()
       (company-mode-on))

     (add-hook 'elm-mode-hook #'binarin/elm-mode-hook)

     (eval-after-load "elm-mode"
       (lambda ()
         (require 'company)
         (add-to-list 'company-backends 'company-elm)))
   #+END_SRC
** Erlang
   :PROPERTIES:
   :ID:       f947b108-a5c9-4806-85fc-90592ca8f19a
   :ARCHIVE_TIME: 2016-06-18 Сб 22:49
   :ARCHIVE_FILE: ~/.rc/emacs-config.org
   :ARCHIVE_OLPATH: Programming
   :ARCHIVE_CATEGORY: emacs-config
   :END:

   #+begin_src emacs-lisp
     (defun binarin/erlang-mode-hook ()
       (local-set-key (kbd "M-*") #'edts-find-source-unwind))

     (add-hook 'erlang-mode-hook 'binarin/erlang-mode-hook)

     (when (f-dir? "~/personal-workspace/edts")
       (setf edts-inhibit-package-check t)
       (add-to-list 'load-path "~/personal-workspace/edts")
       (require 'edts-start))
   #+end_src

** Emacs Lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'example-mode-hook 'elisp-slime-nav-mode)
     (add-hook 'example-mode-hook 'eldoc-mode)
     (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
     (add-hook 'ielm-mode-hook 'eldoc-mode)
     (add-hook 'eval-expression-minibuffer-setup-hook 'eldoc-mode)
     (add-hook 'emacs-lisp-mode-hook 'easy-escape-minor-mode)

     (eval-after-load "easy-escape"
       (lambda ()
         (set-face-attribute 'easy-escape-face nil :foreground "red2")
         (set-face-attribute 'easy-escape-delimiter-face nil :foreground "red3")))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
          ;; (add-hook 'haskell-mode-hook 'intero-mode-whitelist)
          ;; (autoload 'intero-mode-whitelist "intero")
          ;; (setf intero-whitelist '("~/personal-workspace/learnopengl"))
          (setf haskell-indent-spaces 4)
          (setf haskell-stylish-on-save nil)
          (setf haskell-tags-on-save t)
          (setf haskell-process-suggest-remove-import-lines t)
          (setf haskell-process-auto-import-loaded-modules t)
          (setf haskell-process-suggest-hoogle-imports t)
          (setf haskell-process-use-presentation-mode t)
          (setf haskell-process-log t)

          (defun binarin/haskell-mode-hook ()
            (company-mode t)
            (structured-haskell-mode t)
            (interactive-haskell-mode t)
            ;; (flyspell-prog-mode t)
            (set (make-local-variable 'company-backends)
                 (append '((company-capf company-dabbrev-code company-yasnippet))
                         company-backends)))

          (eval-after-load "haskell"
            (lambda ()
              (define-key interactive-haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)
              (define-key interactive-haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)))

          (eval-after-load "haskell-mode"
            (lambda ()
              (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile)
              (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)))

          (eval-after-load "haskell-cabal"
            (lambda ()
              (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile)))

          (add-hook 'haskell-mode-hook 'binarin/haskell-mode-hook)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (defun binarin/python-mode-hook ()
       (setf whitespace-style '(tabs trailing tab-mark face lines-tail))
       (whitespace-mode 1))

     (add-hook 'python-mode-hook #'binarin/python-mode-hook)
   #+END_SRC
* Keybindings
** Default global keybindings (for reference)
   :PROPERTIES:
   :ID:       a4ffc76e-7fe0-41d4-8026-13c778ef2e79
   :END:
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| ESC          |        | ESC-prefix                           |      |                                   | keymap                           |                         |                                   |                         |                         |
| <f1>         |        | help-command                         |      |                                   |                                  |                         |                                   |                         |                         |
| <f2>         |        | 2C-command                           |      |                                   |                                  |                         |                                   |                         |                         |
| <f3>         |        | kmacro-start-macro-or-insert-counter |      |                                   |                                  |                         |                                   |                         |                         |
| <f4>         |        | kmacro-end-or-call-macro             |      |                                   |                                  |                         |                                   |                         |                         |
| <f5>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f6>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f7>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f8>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f9>         |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <f10>        |        | menu-bar-open                        |      | buffer-menu-open                  | toggle-frame-maximized           |                         |                                   |                         |                         |
| <f11>        |        | toggle-frame-fullscreen              |      |                                   |                                  |                         |                                   |                         |                         |
| <f12>        |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <home>       |        | move-beginning-of-line               |      | beginning-of-buffer               | beginning-of-buffer-other-window | beginning-of-defun      |                                   |                         |                         |
| <end>        |        | move-end-of-line                     |      | end-of-buffer                     | end-of-buffer-other-window       | end-of-defun            |                                   |                         |                         |
| <insert>     |        | overwrite-mode                       | yank | kill-ring-save                    |                                  |                         |                                   |                         |                         |
| <deletechar> |        | delete-forward-char                  |      |                                   |                                  |                         |                                   |                         |                         |
| DEL          |        | delete-backward-char                 |      |                                   | backward-kill-word               |                         |                                   |                         |                         |
| RET          |        | newline                              |      |                                   |                                  |                         |                                   |                         |                         |
| <prior>      |        | scroll-down-command                  |      | scroll-right                      | scroll-other-window-down         |                         |                                   |                         |                         |
| <next>       |        | scroll-up-command                    |      | scroll-left                       | scroll-other-window              |                         |                                   |                         |                         |
| <tab>        |        |                                      |      |                                   |                                  |                         |                                   |                         |                         |
| <left>       |        | left-char                            |      | left-word                         | left-word                        | backward-sexp           |                                   |                         |                         |
| <right>      |        | right-char                           |      | right-word                        | right-word                       | forward-sexp            |                                   |                         |                         |
| <up>         |        | previous-line                        |      | backward-paragraph                |                                  | backward-up-list        |                                   |                         |                         |
| <down>       |        | next-line                            |      | forward-paragraph                 |                                  | down-list               |                                   |                         |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| `ǁ~          | $ǁ~    | self                                 | self |                                   | ispell-word                      |                         |                                   | not-modified            |                         |
| 1ǁ!          | &ǁ%    | self                                 | self |                                   | async-shell-command              |                         |                                   | query-replace           | query-replace-regexp    |
| 2ǁ@          | [ǁ7    | self                                 | self | ESC-prefix                        |                                  | keymap                  | digit-argument                    | digit-argument          | digit-argument          |
| 3ǁ#          | {ǁ5    | self                                 | self |                                   | backward-paragraph               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 4ǁ$          | }ǁ3    | self                                 | self |                                   | forward-paragraph                |                         | digit-argument                    | digit-argument          | digit-argument          |
| 5ǁ%          | (ǁ1    | self                                 | self |                                   | insert-parentheses               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 6ǁ^          | "=ǁ9"  | self                                 | self |                                   | count-words-region               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 7ǁ&          | *ǁ0    | self                                 | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 8ǁ*          | )ǁ2    | self                                 | self |                                   | move-past-close-and-reindent     |                         | digit-argument                    | digit-argument          | digit-argument          |
| 9ǁ(          | +ǁ4    | self                                 | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 0ǁ)          | ]ǁ6    | self                                 | self | abort-recursive-edit              |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| -ǁ_          | !ǁ8    | self                                 | self |                                   | shell-command                    |                         | digit-argument                    | digit-argument          | digit-argument          |
| "=ǁ+"        | #ǁ`    | self                                 | self |                                   |                                  |                         |                                   | tmm-menubar             |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| qǁQ          | ;ǁ:    | self                                 | self |                                   | comment-dwim                     |                         |                                   | eval-expression         |                         |
| wǁW          | ,ǁ<    | self                                 | self |                                   | xref-pop-marker-stack            |                         |                                   | beginning-of-buffer     |                         |
| eǁE          | .ǁ>    | self                                 | self |                                   | xref-find-definitions            | xref-find-apropos       |                                   | end-of-buffer           |                         |
| rǁR          | pǁP    | self                                 | self | previous-line                     |                                  | backward-list           | previous-line                     |                         | backward-list           |
| tǁT          | yǁY    | self                                 | self | yank                              | yank-pop                         |                         | yank                              |                         |                         |
| yǁY          | fǁF    | self                                 | self | forward-char                      | forward-word                     | forward-sexp            | forward-char                      |                         | forward-sexp            |
| uǁU          | gǁG    | self                                 | self | keyboard-quit                     | keymap                           |                         | keyboard-quit                     |                         |                         |
| iǁI          | cǁC    | self                                 | self | mode-specific-command-prefix      | capitalize-word                  | exit-recursive-edit     | mode-specific-command-prefix      |                         | exit-recursive-edit     |
| oǁO          | rǁR    | self                                 | self | isearch-backward                  | move-to-window-line-top-bottom   | isearch-backward-regexp | isearch-backward                  |                         | isearch-backward-regexp |
| pǁP          | lǁL    | self                                 | self | recenter-top-bottom               | downcase-word                    | reposition-window       | recenter-top-bottom               |                         | reposition-window       |
| [ǁ{          | /ǁ?    | self                                 | self | undo                              | dabbrev-expand                   | dabbrev-completion      |                                   | xref-find-references    |                         |
| ]ǁ}          | @ǁ^    | self                                 | self | set-mark-command                  | mark-word                        | mark-sexp               |                                   | delete-indentation      |                         |
| \ǁpipe       | \ǁpipe | self                                 | self | toggle-input-method               | delete-horizontal-space          | indent-region           |                                   | shell-command-on-region |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| aǁA          | aǁA    | self                                 | self | move-beginning-of-line            | backward-sentence                | beginning-of-defun      | move-beginning-of-line            |                         | beginning-of-defun      |
| sǁS          | oǁO    | self                                 | self | open-line                         | facemenu-keymap                  | split-line              | open-line                         |                         | split-line              |
| dǁD          | eǁE    | self                                 | self | move-end-of-line                  | forward-sentence                 | end-of-defun            | move-end-of-line                  |                         | end-of-defun            |
| fǁF          | uǁU    | self                                 | self | universal-argument                | upcase-word                      | backward-up-list        | universal-argument                |                         | backward-up-list        |
| gǁG          | iǁI    | self                                 | self | indent-for-tab-command            | tab-to-tab-stop                  | complete-symbol         | indent-for-tab-command            |                         | complete-symbol         |
| hǁH          | dǁD    | self                                 | self | delete-char                       | kill-word                        | down-list               | delete-char                       |                         | down-list               |
| jǁJ          | hǁH    | self                                 | self | help-command                      | mark-paragraph                   | mark-defun              | help-command                      |                         | mark-defun              |
| kǁK          | tǁT    | self                                 | self | transpose-chars                   | transpose-words                  | transpose-sexps         | transpose-chars                   |                         | transpose-sexps         |
| lǁL          | nǁN    | self                                 | self | next-line                         |                                  | forward-list            | next-line                         |                         | forward-list            |
| ;ǁ:          | sǁS    | self                                 | self | isearch-forward                   | keymap                           | isearch-forward-regexp  | isearch-forward                   |                         | isearch-forward-regexp  |
| 'ǁ"          | -ǁ_    | self                                 | self | negative-argument                 | negative-argument                | negative-argument       | undo                              |                         |                         |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                                      | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+--------------------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| zǁZ          | 'ǁ"    | self                                 | self |                                   | abbrev-prefix-mark               |                         |                                   |                         |                         |
| xǁX          | qǁQ    | self                                 | self | quoted-insert                     | fill-paragraph                   |                         | quoted-insert                     |                         |                         |
| cǁC          | jǁJ    | self                                 | self | electric-newline-and-maybe-indent | indent-new-comment-line          | indent-new-comment-line | electric-newline-and-maybe-indent |                         | indent-new-comment-line |
| vǁV          | kǁK    | self                                 | self | kill-line                         | kill-sentence                    | kill-sexp               | kill-line                         |                         | kill-sexp               |
| bǁB          | xǁX    | self                                 | self | Control-X-prefix                  | execute-extended-command         |                         | Control-X-prefix                  |                         |                         |
| nǁN          | bǁB    | self                                 | self | backward-char                     | backward-word                    | backward-sexp           | backward-char                     |                         | backward-sexp           |
| mǁM          | mǁM    | self                                 | self | newline                           | back-to-indentation              |                         | newline                           |                         |                         |
| ,ǁ<          | wǁW    | self                                 | self | kill-region                       | kill-ring-save                   | append-next-kill        | kill-region                       |                         | append-next-kill        |
| .ǁ>          | vǁV    | self                                 | self | scroll-up-command                 | scroll-down-command              | scroll-other-window     | scroll-up-command                 |                         | scroll-other-window     |
| /ǁ?          | zǁZ    | self                                 | self | suspend-frame                     | zap-to-char                      |                         | suspend-frame                     |                         |                         |


** Global keybindings overview (regenerate manually)

   #+BEGIN_SRC emacs-lisp
     (defun binarin/lookup-keybinding-in-formula (ascii dvp mod-string shift)
       (if (string= ascii "QWE")
           (concat mod-string (if shift "S-" ""))
         (binarin/lookup-keybinding-in-formula-1 ascii dvp mod-string shift)))

     (defun binarin/lookup-keybinding-in-formula-1 (ascii dvp mod-string shift)
       (let* ((unquoted-dvp (if (and (s-starts-with? "\"" dvp)
                                     (s-ends-with? "\"" dvp))
                                (org-remove-double-quotes dvp)
                              dvp))
              (primary-key
               (if (= 0 (length dvp))
                   ascii
                 (car (split-string unquoted-dvp "ǁ"))))
              (norm-primary-key (cond
                                 ((string= primary-key "pipe") "|")
                                 (t primary-key)))
              (shifted-key (second (split-string unquoted-dvp "ǁ")))
              (norm-shifted-key (cond
                                 ((string= shifted-key "pipe") "|")
                                 (t shifted-key)))
              (shift-string (if (and shift (not shifted-key)) "S-" ""))
              (key (if (and shift shifted-key) norm-shifted-key norm-primary-key))
              (full-key-string (concat mod-string shift-string key))
              (command (lookup-key (current-global-map) (kbd full-key-string))))
         (cond
          ((null command) "")
          ((eq command 'self-insert-command) "self")
          ((symbolp command) (format "%s" command))
          ((keymapp command) "keymap")
          (t (format "%s" command)))))
   #+END_SRC

|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| ESC          |        | ESC-prefix             |      |                                   | keymap                           |                         |                                   |                         |                         |
| <f1>         |        | help-command           |      |                                   |                                  |                         |                                   |                         |                         |
| <f2>         |        | save-buffer            |      |                                   |                                  |                         |                                   |                         |                         |
| <f3>         |        | helm-find-files        |      | binarin/kill-current-buffer       |                                  |                         |                                   |                         |                         |
| <f4>         |        | replace-string         |      | replace-regexp                    |                                  |                         |                                   |                         |                         |
| <f5>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f6>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f7>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f8>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f9>         |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <f10>        |        | menu-bar-open          |      | buffer-menu-open                  | toggle-frame-maximized           |                         |                                   |                         |                         |
| <f11>        |        | org-clock-goto         |      | org-clock-in                      |                                  |                         |                                   |                         |                         |
| <f12>        |        | magit-status           |      |                                   |                                  |                         |                                   |                         |                         |
| <home>       |        | move-beginning-of-line |      | beginning-of-buffer               | beginning-of-buffer-other-window | beginning-of-defun      |                                   |                         |                         |
| <end>        |        | move-end-of-line       |      | end-of-buffer                     | end-of-buffer-other-window       | end-of-defun            |                                   |                         |                         |
| <insert>     |        | overwrite-mode         | yank | kill-ring-save                    |                                  |                         |                                   |                         |                         |
| <deletechar> |        | delete-forward-char    |      |                                   |                                  |                         |                                   |                         |                         |
| DEL          |        | delete-backward-char   |      |                                   | backward-kill-word               |                         |                                   |                         |                         |
| RET          |        | newline                |      |                                   |                                  |                         |                                   |                         |                         |
| <prior>      |        | scroll-down-command    |      | scroll-right                      | scroll-other-window-down         |                         |                                   |                         |                         |
| <next>       |        | scroll-up-command      |      | scroll-left                       | scroll-other-window              |                         |                                   |                         |                         |
| <tab>        |        |                        |      |                                   |                                  |                         |                                   |                         |                         |
| <left>       |        | left-char              |      | left-word                         | left-word                        | backward-sexp           |                                   |                         |                         |
| <right>      |        | right-char             |      | right-word                        | right-word                       | forward-sexp            |                                   |                         |                         |
| <up>         |        | previous-line          |      | backward-paragraph                |                                  | backward-up-list        |                                   |                         |                         |
| <down>       |        | next-line              |      | forward-paragraph                 |                                  | down-list               |                                   |                         |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| `ǁ~          | $ǁ~    | self                   | self |                                   | ispell-word                      |                         |                                   | not-modified            |                         |
| 1ǁ!          | &ǁ%    | self                   | self |                                   | delete-other-windows             |                         |                                   | query-replace           | query-replace-regexp    |
| 2ǁ@          | [ǁ7    | self                   | self | ESC-prefix                        | split-window-below               | keymap                  | digit-argument                    | digit-argument          | digit-argument          |
| 3ǁ#          | {ǁ5    | self                   | self |                                   | split-window-right               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 4ǁ$          | }ǁ3    | self                   | self |                                   | forward-paragraph                |                         | digit-argument                    | digit-argument          | digit-argument          |
| 5ǁ%          | (ǁ1    | self                   | self |                                   | insert-parentheses               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 6ǁ^          | "=ǁ9"  | self                   | self |                                   | count-words-region               |                         | digit-argument                    | digit-argument          | digit-argument          |
| 7ǁ&          | *ǁ0    | self                   | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 8ǁ*          | )ǁ2    | self                   | self |                                   | move-past-close-and-reindent     |                         | digit-argument                    | digit-argument          | digit-argument          |
| 9ǁ(          | +ǁ4    | self                   | self |                                   |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| 0ǁ)          | ]ǁ6    | self                   | self | abort-recursive-edit              |                                  |                         | digit-argument                    | digit-argument          | digit-argument          |
| -ǁ_          | !ǁ8    | self                   | self | binarin/projectile-eshell         | shell-command                    |                         | digit-argument                    | digit-argument          | digit-argument          |
| "=ǁ+"        | #ǁ`    | self                   | self |                                   |                                  |                         |                                   | tmm-menubar             |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| qǁQ          | ;ǁ:    | self                   | self |                                   | comment-dwim                     |                         |                                   | eval-expression         |                         |
| wǁW          | ,ǁ<    | self                   | self |                                   | xref-pop-marker-stack            |                         |                                   | beginning-of-buffer     |                         |
| eǁE          | .ǁ>    | self                   | self |                                   | xref-find-definitions            | xref-find-apropos       |                                   | end-of-buffer           |                         |
| rǁR          | pǁP    | self                   | self | previous-line                     |                                  | backward-list           | previous-line                     |                         | backward-list           |
| tǁT          | yǁY    | self                   | self | yank                              | helm-show-kill-ring              |                         | yank                              |                         |                         |
| yǁY          | fǁF    | self                   | self | forward-char                      | forward-word                     | forward-sexp            | forward-char                      |                         | forward-sexp            |
| uǁU          | gǁG    | self                   | self | keyboard-quit                     | keymap                           |                         | keyboard-quit                     |                         |                         |
| iǁI          | cǁC    | self                   | self | mode-specific-command-prefix      | capitalize-word                  | exit-recursive-edit     | mode-specific-command-prefix      |                         | exit-recursive-edit     |
| oǁO          | rǁR    | self                   | self | isearch-backward                  | move-to-window-line-top-bottom   | isearch-backward-regexp | isearch-backward                  |                         | isearch-backward-regexp |
| pǁP          | lǁL    | self                   | self | recenter-top-bottom               | downcase-word                    | reposition-window       | recenter-top-bottom               |                         | reposition-window       |
| [ǁ{          | /ǁ?    | self                   | self | undo                              | dabbrev-expand                   | dabbrev-completion      |                                   | xref-find-references    |                         |
| ]ǁ}          | @ǁ^    | self                   | self | set-mark-command                  | mark-word                        | mark-sexp               |                                   | delete-indentation      |                         |
| \ǁpipe       | \ǁpipe | self                   | self | toggle-input-method               | delete-horizontal-space          | indent-region           |                                   | shell-command-on-region |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| aǁA          | aǁA    | self                   | self | move-beginning-of-line            | backward-sentence                | beginning-of-defun      | move-beginning-of-line            |                         | beginning-of-defun      |
| sǁS          | oǁO    | self                   | self | open-line                         | other-window                     | split-line              | open-line                         |                         | split-line              |
| dǁD          | eǁE    | self                   | self | move-end-of-line                  | forward-sentence                 | end-of-defun            | move-end-of-line                  |                         | end-of-defun            |
| fǁF          | uǁU    | self                   | self | universal-argument                | upcase-word                      | backward-up-list        | universal-argument                |                         | backward-up-list        |
| gǁG          | iǁI    | self                   | self | indent-for-tab-command            | tab-to-tab-stop                  | complete-symbol         | indent-for-tab-command            |                         | complete-symbol         |
| hǁH          | dǁD    | self                   | self | delete-char                       | kill-word                        | down-list               | delete-char                       |                         | down-list               |
| jǁJ          | hǁH    | self                   | self | help-command                      | mark-paragraph                   | mark-defun              | help-command                      |                         | mark-defun              |
| kǁK          | tǁT    | self                   | self | transpose-chars                   | transpose-words                  | transpose-sexps         | transpose-chars                   |                         | transpose-sexps         |
| lǁL          | nǁN    | self                   | self | next-line                         | delete-window                    | forward-list            | next-line                         |                         | forward-list            |
| ;ǁ:          | sǁS    | self                   | self | isearch-forward                   | keymap                           | isearch-forward-regexp  | isearch-forward                   |                         | isearch-forward-regexp  |
| 'ǁ"          | -ǁ_    | self                   | self | negative-argument                 | negative-argument                | negative-argument       | undo                              |                         |                         |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| QWE          | DVP    |                        | S-   | C-                                | M-                               | C-M-                    | C-S-                              | M-S-                    | C-M-S-                  |
|--------------+--------+------------------------+------+-----------------------------------+----------------------------------+-------------------------+-----------------------------------+-------------------------+-------------------------|
| zǁZ          | 'ǁ"    | self                   | self |                                   | abbrev-prefix-mark               |                         |                                   |                         |                         |
| xǁX          | qǁQ    | self                   | self | quoted-insert                     | fill-paragraph                   |                         | quoted-insert                     |                         |                         |
| cǁC          | jǁJ    | self                   | self | electric-newline-and-maybe-indent | indent-new-comment-line          | indent-new-comment-line | electric-newline-and-maybe-indent |                         | indent-new-comment-line |
| vǁV          | kǁK    | self                   | self | kill-line                         | kill-sentence                    | kill-sexp               | kill-line                         |                         | kill-sexp               |
| bǁB          | xǁX    | self                   | self | Control-X-prefix                  | helm-M-x                         |                         | Control-X-prefix                  |                         |                         |
| nǁN          | bǁB    | self                   | self | backward-char                     | backward-word                    | backward-sexp           | backward-char                     |                         | backward-sexp           |
| mǁM          | mǁM    | self                   | self | newline                           | back-to-indentation              |                         | newline                           |                         |                         |
| ,ǁ<          | wǁW    | self                   | self | kill-region                       | kill-ring-save                   | append-next-kill        | kill-region                       |                         | append-next-kill        |
| .ǁ>          | vǁV    | self                   | self | scroll-up-command                 | scroll-down-command              | scroll-other-window     | scroll-up-command                 |                         | scroll-other-window     |
| /ǁ?          | zǁZ    | self                   | self | keymap                            | zap-to-char                      |                         | keymap                            |                         |                         |
#+TBLFM: $3='(binarin/lookup-keybinding-in-formula $1 $2 "" nil)::$4='(binarin/lookup-keybinding-in-formula $1 $2 "" t)::$5='(binarin/lookup-keybinding-in-formula $1 $2 "C-" nil)::$6='(binarin/lookup-keybinding-in-formula $1 $2 "M-" nil)::$7='(binarin/lookup-keybinding-in-formula $1 $2 "C-M-" nil)::$8='(binarin/lookup-keybinding-in-formula $1 $2 "C-" t)::$9='(binarin/lookup-keybinding-in-formula $1 $2 "M-" t)::$10='(binarin/lookup-keybinding-in-formula $1 $2 "C-M-" t)

** Key chords
#+begin_src emacs-lisp
  (require 'key-chord)
  (key-chord-mode t)
  (key-chord-define-global "jk" 'undo-tree-undo)
  (key-chord-define-global "wm" 'undo-tree-redo)
#+end_src
** Turn C-z into prefix command
   #+BEGIN_SRC emacs-lisp
     (defvar ctrl-z-map (make-sparse-keymap))
     (let ((orig-ctrl-z-binding (lookup-key (current-global-map) [(control ?z)])))
       (global-set-key [(control ?z)] ctrl-z-map)
       (global-set-key [(control ?z) (control ?z)] orig-ctrl-z-binding))

     (global-set-key [(control ?z) (control ?g)] 'keyboard-quit)
   #+END_SRC

** Other keybindings
  #+begin_src emacs-lisp
    (global-set-key (kbd "M-&") 'delete-other-windows)
    (global-set-key (kbd "M-[") 'split-window-below)
    (global-set-key (kbd "M-{") 'split-window-right)
    (define-key org-mode-map (kbd "M-{") 'split-window-right)

    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "M-n") 'delete-window)

    (global-set-key (kbd "<f11>") 'org-clock-goto)
    (global-set-key (kbd "C-<f11>") 'org-clock-in)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key "\e\eb" (lambda () (interactive) (switch-to-buffer (other-buffer))))
    (global-set-key "\e\ec" 'comment-region)
    (global-set-key "\e\ei" 'indent-region)
    (global-set-key "\e\el" 'goto-line)
    (global-set-key "\e\et" 'toggle-truncate-lines)

    (global-set-key [f2]  'save-buffer)

    (defun binarin/kill-current-buffer ()
        (interactive)
        (kill-buffer (current-buffer)))
    (global-set-key [C-f3] 'binarin/kill-current-buffer)

    (global-set-key [f4]  'replace-string)
    (global-set-key [C-f4] 'replace-regexp)

  #+end_src

* File footer
  :PROPERTIES:
  :ID:       06755181-420b-4911-80a7-cfec7cc4b655
  :END:

  #+begin_src emacs-lisp
    (defun binarin/server-start ()
      (require 'server)
      (unless (server-running-p server-name)
        (server-start)))

    (add-hook 'after-init-hook #'binarin/server-start)
  #+end_src
