#+TITLE: binarin's emacs configuration
#+OPTIONS: toc:4 h:4
* File header
  :PROPERTIES:
  :ID:       872629ce-4d48-47d4-b276-f7935cd31243
  :END:
** Enable lexical bindings
  #+begin_src emacs-lisp
    ;; -*- lexical-binding: t -*-
  #+end_src

** Load helper modules
  #+begin_src emacs-lisp
    (package-initialize)

    (require 'cl-lib)
    (require 'f)
    (require 's)
    (require 'dash)
    (require 'anaphora)
    (require 'general)

    ;; general-setq will also call triggers on customizable setttings,
    ;; allowing them to be properly changed even after corresponding
    ;; package was loaded
    (fset 'gsetq 'general-setq)
  #+end_src

** Use separate lisp file for customizations made through UI
   Load it early, so any lisp customizations can override customized values.
  #+begin_src emacs-lisp
    (gsetq custom-file (concat (file-name-directory binarin/primary-emacs-config) "custom.el"))
    (load-file custom-file)
  #+end_src

* Startup
** Hide startup screen

   #+begin_src emacs-lisp
       (gsetq inhibit-startup-screen t)
   #+end_src

** Delay keybindings

   I want my keybindings to be applied late in the initialization
   process, after all keymaps are already created and packages are
   loaded.

   #+BEGIN_SRC emacs-lisp
     (defvar binarin/keybindings nil)
     (defvar binarin/keybindings-applied nil)

     (defun binarin/define-key (&rest args)
       (when binarin/keybindings-applied
	 (apply #'general-define-key args))
       (add-to-list 'binarin/keybindings args))

     (defun binarin/apply-queued-keybindings ()
       (setf binarin/keybindings-applied t)
       (-each binarin/keybindings #'(lambda (args) (apply #'general-define-key args))))
   #+END_SRC

* Appearance
** Fonts
   :PROPERTIES:
   :ID:       26d38fee-8252-4024-b0e8-1466ff4052c9
   :END:

  #+begin_src emacs-lisp
    (gsetq default-frame-alist '((font . "Iosevka-22")))
    (defconst binarin/minimal-screen-width 124
      "Iosevka-22 on 1920x1080 screen")
  #+end_src

** Theme
   #+begin_src emacs-lisp
     (require 'zenburn-theme)
   #+end_src
** Set window title
   Full name in window title, will be shown in taskbar.

   #+begin_src emacs-lisp
       (gsetq frame-title-format
             '((:eval (if (buffer-file-name)
                          (abbreviate-file-name (buffer-file-name))
                        "%b"))
               " - "
               invocation-name))
   #+end_src

** Remove visual clutter
   :PROPERTIES:
   :ID:       8ee1f692-db6b-4fac-bb48-edb5910c779b
   :END:

   #+begin_src emacs-lisp
     (awhen (window-system)
       (toggle-scroll-bar -1)
       (tool-bar-mode -1))
   #+end_src

** Tool-tips
   #+BEGIN_SRC emacs-lisp
     (gsetq x-gtk-use-system-tooltips nil)
   #+END_SRC
* Behavior
** Helm
   :PROPERTIES:
   :ID:       8a6ae7ca-1e23-4820-b260-4ece0d844335
   :END:

   #+begin_src emacs-lisp
     (require 'helm-mode)
     (global-unset-key (kbd "C-x c"))

     ;; (require 'helm-org)
     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
     (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
     (define-key helm-map (kbd "M-x")  'helm-select-action) ; list actions using C-z

     (when (executable-find "curl")
       (gsetq helm-google-suggest-use-curl-p t))

     (gsetq helm-quick-update                     t ; do not display invisible candidates
	   helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	   helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
	   helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	   helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	   helm-ff-file-name-history-use-recentf t)

     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key [f3] 'helm-find-files)

     (helm-mode 1)
   #+end_src

** Ivy
   #+BEGIN_SRC emacs-lisp
     (require 'ivy)

     (binarin/define-key "C-'" 'swiper)

     (binarin/define-key
      :keymaps 'ivy-mode-map
      "C-'" 'ivy-avy)

     (ivy-mode 1)

     ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
     (gsetq ivy-use-virtual-buffers t)
     (gsetq ivy-virtual-abbreviate 'full)

     ;; number of result lines to display
     (gsetq ivy-height 10)

     ;; does not count candidates
     (gsetq ivy-count-format "")

     ;; no regexp by default
     (gsetq ivy-initial-inputs-alist nil)

     ;; configure regexp engine.
     (gsetq ivy-re-builders-alist
	    ;; allow input not in order
	    '((t   . ivy--regex-ignore-order)))
   #+END_SRC
** History
    :PROPERTIES:
    :ID:       9dea8cec-794d-4757-84de-2c166ce10567
    :END:
    #+begin_src emacs-lisp
      (gsetq savehist-additional-variables '(search-ring kill-ring regexp-search-ring)
	     savehist-autosave-interval 60 ;; from default 300
	     history-length t
	     history-delete-duplicates t)
      (savehist-mode t)
    #+end_src

    #+begin_src emacs-lisp
      (gsetq recentf-max-saved-items 2000
	     kill-ring-max 5000
	     undo-limit (* 20 1024 1024)
	     undo-strong-limit (* 40 1024 1024)
	     undo-outer-limit (* 100 1024 1024)
	     mark-ring-max 5000
	     global-mark-ring-max 5000)
    #+end_src

    #+begin_src emacs-lisp
      (save-place-mode t)
    #+end_src

** Dired
   #+BEGIN_SRC emacs-lisp
     (add-hook 'dired-mode-hook 'dired-hide-details-mode)
     (binarin/define-key "C-x C-j" 'dired-jump)
   #+END_SRC
** Truncate lines by default
   #+begin_src emacs-lisp
     (gsetq truncate-lines t)
   #+end_src

** Paredit
   :PROPERTIES:
   :ID:       13fbc9ee-bd2c-441b-8b36-ab2d8e153aa7
   :END:

   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
     (add-hook 'example-mode-hook          (lambda () (paredit-mode +1)))
     (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
     (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
     (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
     (add-hook 'slime-repl-mode-hook       (lambda () (paredit-mode +1)))
   #+end_src

** Projectile
   :PROPERTIES:
   :ID:       a86040e5-291f-4b62-ab76-f6b213a483c8
   :END:
   #+begin_src emacs-lisp
     (require 'projectile)
     (gsetq projectile-mode-line nil
            projectile-enable-caching t)

     (projectile-global-mode)

     (add-to-list 'projectile-project-root-files ".edts")
     (add-to-list 'projectile-project-root-files "erlang.mk")
   #+end_src
** Keybindings
   #+BEGIN_SRC emacs-lisp
     (binarin/define-key
      "<f4>" 'replace-string
      "C-<f4>" 'replace-regexp
      "<f12>" 'magit-status
      "C-<f3>" 'binarin/kill-current-buffer)

     (defun binarin/kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
   #+END_SRC
* Org
** Agenda files
   Expand filenames so we can later directly compare them with (buffer-file-name)

   #+begin_src emacs-lisp
     (gsetq org-agenda-files
           (-map #'f-expand
                 (-filter #'f-exists?
                          '("~/org/personal.org"
                            "~/org/contacts.org"
                            "~/org/blog.org"
                            "~/org/refile.org"
                            "~/org/booking.org"
                            "~/org/bcal.org"
                            "~/org/bcal-spd.org"
                            "~/org/bcal-evts.org"
                            "~/.rc/emacs-config.org"
                            "~/org/ference.org"))))
   #+end_src

** Task classification
   #+BEGIN_SRC emacs-lisp
     (defun bh/is-task-p ()
       "Any task with a todo keyword and no subtask"
       (save-restriction
         (widen)
         (let ((has-subtask)
               (subtree-end (save-excursion (org-end-of-subtree t)))
               (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
           (save-excursion
             (forward-line 1)
             (while (and (not has-subtask)
                         (< (point) subtree-end)
                         (re-search-forward "^\*+ " subtree-end t))
               (when (member (org-get-todo-state) org-todo-keywords-1)
                 (setq has-subtask t))))
           (and is-a-task (not has-subtask)))))

     (defun bh/is-project-p ()
       "Any task with a todo keyword subtask"
       (save-restriction
         (widen)
         (let ((has-subtask)
               (subtree-end (save-excursion (org-end-of-subtree t)))
               (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
           (save-excursion
             (forward-line 1)
             (while (and (not has-subtask)
                         (< (point) subtree-end)
                         (re-search-forward "^\*+ " subtree-end t))
               (when (member (org-get-todo-state) org-todo-keywords-1)
                 (setq has-subtask t))))
           (and is-a-task has-subtask))))
   #+END_SRC

** Todo states
   #+begin_src emacs-lisp
     (gsetq org-enforce-todo-dependencies t)

     (gsetq org-use-fast-todo-selection 'prefix)
     (gsetq org-fast-tag-selection-single-key t)

     (gsetq org-todo-keywords
	   '((sequence "TODO(t)" "NEXT(s)" "|" "DONE(d!)")
	     (type "|" "CANCELLED(c)")
	     (type "HOLD(h)" "WAIT(w)" "|")))

     (gsetq org-todo-keyword-faces
	   '(("TODO" :foreground "red" :weight bold)
	     ("NEXT" :foreground "cyan3" :weight bold)
	     ("DONE" :foreground "green4" :weight bold)

	     ("WAIT" :foreground "orange3" :weight bold)
	     ("HOLD" :foreground "orange3" :weight bold)
	     ("CANCELLED" :foreground "forest green" :weight bold)))

     (defun bh/clock-in-to-next (kw)
       "Switch a task from TODO to NEXT when clocking in.
     Skips capture tasks, projects, and subprojects.
     Switch projects and subprojects from NEXT back to TODO"
       (when (not (and (boundp 'org-capture-mode) org-capture-mode))
	 (cond
	  ((and (member (org-get-todo-state) (list "TODO"))
		(bh/is-task-p))
	   "NEXT")
	  ((and (member (org-get-todo-state) (list "NEXT"))
		(bh/is-project-p))
	   "TODO"))))

     (gsetq org-clock-in-switch-to-state #'bh/clock-in-to-next)
   #+end_src

** Contexts
   #+begin_src emacs-lisp
     (setq context-tags
           '(("HOME" . ?h)  ;; home
             ("WORK" . ?w)  ;; office
             ("CITY" . ?y)  ;; on the go
             ("COMP" . ?c)  ;; some place that has trusted computer
             ("PHON" . ?o)  ;; anywhere where I can make phone call
             ))

     (setq context-tag-includes
           '(("HOME" "COMP" "PHON")
             ("WORK" "COMP" "PHON")
             ("CITY" "PHON")
             ("COMP")))

     (setq org-tag-alist `((:startgroup . nil) ;; contexts
                           ,@context-tags
                           (:endgroup . nil)
                           ("AGND" . ?a)
                           ("PROJ" . ?p)
                           ("NEXT" . ?n)
                           ("HABT" . ?b)))
   #+end_src

** Appearance
   #+begin_src emacs-lisp
     (gsetq org-pretty-entities nil)
     (gsetq org-agenda-dim-blocked-tasks t)
     (gsetq org-ellipsis " ▾")
     (gsetq org-cycle-separator-lines 0)
   #+end_src

   #+begin_src emacs-lisp
     (gsetq org-tags-column (- (length org-ellipsis) binarin/minimal-screen-width)
	   org-agenda-tags-column (- (length org-ellipsis) binarin/minimal-screen-width))
   #+end_src

   #+begin_src emacs-lisp
     (eval-after-load "org-habit"
       (lambda ()
	 (gsetq org-habit-graph-column (- binarin/minimal-screen-width
					  org-habit-preceding-days
					  org-habit-following-days
					  1))))
   #+end_src

** Behaviour
   #+begin_src emacs-lisp
     (gsetq org-reverse-note-order t)
     (gsetq org-outline-path-complete-in-steps nil)
     (gsetq org-catch-invisible-edits 'smart)
     (gsetq org-return-follows-link t)
     (gsetq org-id-link-to-org-use-id t)
     (gsetq org-fast-tag-selection-include-todo nil)
     (gsetq org-use-speed-commands t)
   #+end_src
** Agenda
   #+begin_src emacs-lisp
     (binarin/define-key "C-c a" 'org-agenda)
   #+end_src

   #+BEGIN_SRC emacs-lisp
     (gsetq org-agenda-include-diary nil
	    org-agenda-span 'day
	    org-agenda-start-on-weekday 1
	    org-agenda-window-setup 'current-window

	    org-agenda-hide-tags-regexp "ATTACH"

	    org-agenda-todo-ignore-with-date t
	    org-agenda-skip-deadline-if-done t
	    org-agenda-skip-scheduled-if-done t
	    org-agenda-skip-timestamp-if-done t

	    org-deadline-warning-days 30
	    org-agenda-window-frame-fractions '(1 . 1)
	    org-agenda-restore-windows-after-quit t

	    org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2 :narrow 60)
	    org-clock-report-include-clocking-task 't

	    org-agenda-block-separator nil)
   #+END_SRC


   #+begin_src emacs-lisp
     (defun binarin/agenda-sorter-tag-first (tag)
       #'(lambda (a b)
	   (let ((ta (member (downcase tag) (get-text-property 1 'tags a)))
		 (tb (member (downcase tag) (get-text-property 1 'tags b))))
	     (cond
	      ((and ta tb) nil)
	      ((not ta) -1)
	      (t +1)))))

     (defvar binarin/org-include-scheduled-todos
       '((org-agenda-todo-ignore-scheduled nil)
	 (org-agenda-todo-ignore-deadlines nil)
	 (org-agenda-todo-ignore-with-date nil))
       "Items with scheduling information are usually hidden from
     agendas, but sometimes we want to include everything. This list
     will spliced into org-agenda-custom-commands on such occasions.
     ")

     (defvar binarin/project-matcher
       "+PROJ/+TODO")

     (defun binarin/todo-filter-for-context (context)
       "Generates tags-todo filter string for a given context"
       (concat (mapconcat 'identity
			  (list* "-agenda_hide"
				 (cl-remove-if (lambda (elt)
						 (member elt (or (assoc context context-tag-includes)
								 context)))
					       (mapcar 'car context-tags)))
			  "-")
	       "/+NEXT"))

     (gsetq org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-keep)
					  (todo priority-down user-defined-down category-keep)
					  (tags priority-down category-keep)
					  (search category-keep))
	    org-agenda-cmp-user-defined (binarin/agenda-sorter-tag-first "NEXT"))

     (defun binarin/shrink-text ()
       (text-scale-increase 0)
       (text-scale-increase -1))

     (add-hook 'org-agenda-mode-hook #'binarin/shrink-text)

     (defconst binarin/agenda-block-separator
       "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

     (setq org-agenda-custom-commands
	   `(("l" . "Context-based agenda")
	     ,@(loop for (tag . char) in context-tags
		     collect (list (concat "l" (char-to-string char))
				   (concat "Agenda and context " tag)
				   `((agenda "" ((org-agenda-span 2)))
				     (tags-todo ,(binarin/todo-filter-for-context tag)
						((org-agenda-overriding-header ,(concat binarin/agenda-block-separator "\nContext: " tag))
						 (org-agenda-todo-ignore-scheduled t)
						 (org-agenda-todo-ignore-deadlines t)
						 (org-agenda-sorting-strategy '(priority-down user-defined-down category-up))
						 (org-agenda-cmp-user-defined ',(binarin/agenda-sorter-tag-first tag))))
				     (tags-todo ,binarin/project-matcher
						((org-agenda-overriding-header ,(concat binarin/agenda-block-separator "\nProjects: "))
						 (org-agenda-dim-blocked-tasks t))))
				   `((org-agenda-dim-blocked-tasks 'invisible))))))

     (setq org-agenda-tags-todo-honor-ignore-options t)
   #+end_src
** Contacts
   #+BEGIN_SRC emacs-lisp
     (require 'org-contacts)
     (gsetq org-contacts-files '("~/org/contacts.org"))

     (defconst binarin/org-contact-field-defaults
       '(("TYPE" . "person")
         ("EMAIL" . "")
         ("PHONE" . "")
         ("BIRTHDAY" . "")
         ("GENDER" . "")))

     (defun binarin/helm-org-contacts-field-insert (field)
       (awhen (assoc field binarin/org-contact-field-defaults)
         (org-set-property field (cdr it))
         (org-back-to-heading)
         (let ((range (org-get-property-block (point) 'force)))
           (org-flag-drawer nil)
           (goto-char (car range))
           (re-search-forward (org-re-property field nil t)))))

     (gsetq helm-source-org-contacts-field
       `((name . "Org-contacts fields")
         (candidates . ,(-map #'car binarin/org-contact-field-defaults))
         (no-matchplugin)
         (nohighlight)
         (action . binarin/helm-org-contacts-field-insert)))

     (defun helm-org-contacts-field ()
       "Select a field for insertion in an org-contacts entry."
       (interactive)
       (helm :sources '(helm-source-org-contacts-field)))
   #+END_SRC
** Refiling
   #+BEGIN_SRC emacs-lisp
     ;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
     (gsetq org-refile-targets
           '((org-agenda-files :maxlevel . 5)
             (nil :maxlevel . 5)))

     ;; Targets start with the file name - allows creating level 1 tasks
     (gsetq org-refile-use-outline-path 'file)

     (defun binarin/update-parent-todo-statistics (&rest rest)
       (save-excursion
         (org-update-parent-todo-statistics)))

     (add-hook 'org-after-refile-insert-hook #'binarin/update-parent-todo-statistics)

     (advice-add 'org-refile :after #'binarin/update-parent-todo-statistics)

     (advice-add 'org-archive-subtree :after #'binarin/update-parent-todo-statistics)
   #+END_SRC

** Persistence
   Synchronization is performed by external process, so try to be in
   sync with disk.
   #+BEGIN_SRC emacs-lisp
     (run-at-time nil 60 'org-save-all-org-buffers)
     (add-hook 'org-mode-hook (lambda () (auto-revert-mode 1)))
   #+END_SRC
** Habits
   #+BEGIN_SRC emacs-lisp
     (require 'org-habit)
   #+END_SRC
* Programming
** Perl
    #+begin_src emacs-lisp
      (fset 'perl-mode 'cperl-mode)

      (gsetq cperl-auto-newline t
	     cperl-hairy t
	     cperl-brace-offset 0   
	     cperl-close-paren-offset -4  
	     cperl-continued-brace-offset 0   
	     cperl-continued-statement-offset 4   
	     cperl-extra-newline-before-brace nil 
	     cperl-extra-newline-before-brace-multiline nil 
	     cperl-indent-level 4   
	     cperl-indent-parens-as-block t   
	     cperl-label-offset -4  
	     cperl-merge-trailing-else nil 
	     cperl-tab-always-indent t)

      (add-to-list 'auto-mode-alist '("\\.t$" . perl-mode))

      (defun binarin/cperl-mode-hook ()
	(origami-mode t)
	(hs-minor-mode t)
	(yas-minor-mode t)
	(setf prettify-symbols-alist '(("->" . ?→)
				       (">=" . ?≥)
				       ("<=" . ?≤)
				       ("<>" . ?≠)
				       ("=>" . ?⇒)))
  
	(prettify-symbols-mode t)
	(local-set-key (read-kbd-macro "C-c C-c") 'origami-forward-toggle-node)
	(local-set-key (read-kbd-macro "M-.") 'helm-etags-select)
	(setf tags-file-name (expand-file-name "TAGS" (projectile-project-root))
	      tags-table-list nil))

      (add-hook 'cperl-mode-hook 'binarin/cperl-mode-hook)
      (add-hook 'cperl-mode-hook 'ws-butler-mode) ;; XXX prog-mode

   #+end_src

* File footer
** Apply delayed keybindings
   #+BEGIN_SRC emacs-lisp
     (binarin/apply-queued-keybindings)

   #+END_SRC
